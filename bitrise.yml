---
format_version: '11'
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git
project_type: android

pipelines:
  default:
    stages:
    - setup: {}
    - verify: {}

stages:
  setup:
    abort_on_fail: true
    workflows:
    - evaluate_build: {}
  verify:
    abort_on_fail: true
    workflows:
    - test_library: {}
    - test_plugin: {}
    - test_legacy_sample: {}
    - test_flix: {}
    - test_accessibility_ext: {}
    - test_compose_ext: {}
    - test_fullscreen_ext: {}

workflows:
  evaluate_build:
    steps:
    - github-status@3:
        run_if: .IsCI
        inputs:
        - set_specific_status: "pending"
        - auth_token: $GITHUB_TOKEN
        - status_identifier: "Library"
        - pipeline_build_url: "$BITRISE_BUILD_URL"
    - github-status@3:
        run_if: .IsCI
        inputs:
        - set_specific_status: "pending"
        - auth_token: $GITHUB_TOKEN
        - status_identifier: "Plugin"
        - pipeline_build_url: "$BITRISE_BUILD_URL"
    - github-status@3:
        run_if: .IsCI
        inputs:
        - set_specific_status: "pending"
        - auth_token: $GITHUB_TOKEN
        - status_identifier: "Legacy Sample"
        - pipeline_build_url: "$BITRISE_BUILD_URL"
    - github-status@3:
        run_if: .IsCI
        inputs:
        - set_specific_status: "pending"
        - auth_token: $GITHUB_TOKEN
        - status_identifier: "Flix Sample App"
        - pipeline_build_url: "$BITRISE_BUILD_URL"
    - github-status@3:
        run_if: .IsCI
        inputs:
        - set_specific_status: "pending"
        - auth_token: $GITHUB_TOKEN
        - status_identifier: "Flix Sample Library"
        - pipeline_build_url: "$BITRISE_BUILD_URL"
    - github-status@3:
        run_if: .IsCI
        inputs:
        - set_specific_status: "pending"
        - auth_token: $GITHUB_TOKEN
        - status_identifier: "Accessibility Extension"
        - pipeline_build_url: "$BITRISE_BUILD_URL"
    - github-status@3:
        run_if: .IsCI
        inputs:
        - set_specific_status: "pending"
        - auth_token: $GITHUB_TOKEN
        - status_identifier: "Compose Extension"
        - pipeline_build_url: "$BITRISE_BUILD_URL"
    - github-status@3:
        run_if: .IsCI
        inputs:
        - set_specific_status: "pending"
        - auth_token: $GITHUB_TOKEN
        - status_identifier: "Fullscreen Extension"
        - pipeline_build_url: "$BITRISE_BUILD_URL"
    meta:
      bitrise.io:
        stack: linux-docker-android-22.04
        machine_type_id: standard

  _emulatorSetup:
    summary: Run your Android unit tests and get the test report.
    description: The workflow will first clone your Git repository, cache your Gradle
      dependencies, install Android tools, run your Android unit tests and save the
      test report.
    steps:
    - avd-manager@1:
        timeout: 240
        inputs:
        - api_level: '29'
        - start_command_flags: "-camera-back none -camera-front none -no-snapshot -noaudio -no-boot-anim -partition-size 6144"
        - profile: pixel_3a
        title: 'Emulator: Launch'
    - wait-for-android-emulator@1:
        timeout: 300
        title: 'Emulator: Wait'

  _globalSetup:
    summary: Run your Android unit tests and get the test report.
    description: The workflow will first clone your Git repository, cache your Gradle
      dependencies, install Android tools, run your Android unit tests and save the
      test report.
    steps:
    - git-clone@8: {}
    - set-java-version@1:
        inputs:
        - set_java_version: '17'
    - install-missing-android-tools@3:
        inputs:
        - gradlew_path: "$PROJECT_LOCATION/gradlew"

  test_legacy_sample:
    summary: Run your Android unit tests and get the test report.
    description: The workflow will first clone your Git repository, cache your Gradle
      dependencies, install Android tools, run your Android unit tests and save the
      test report.
    steps:
    - android-unit-test@1:
        inputs:
        - project_location: "$PROJECT_LOCATION"
        - variant: Debug
        - module: LegacySample
        - cache_level: none
    - android-build-for-ui-testing@0:
        inputs:
        - variant: Debug
        - module: LegacySample
    - git::https://github.com/ndtp/bitrise-step-android-testify.git@main:
        timeout: 1800
        title: Run Screenshot Tests
        inputs:
        - adb_command: "./gradlew LegacySample:screenshotTest"
        - module: ":LegacySample"
        - app_apk: "./Samples/Legacy/build/outputs/apk/debug/LegacySample-debug.apk"
        - app_package: dev.testify.sample
        - test_apk: "./Samples/Legacy/build/outputs/apk/androidTest/debug/LegacySample-debug-androidTest.apk"
        - test_package: dev.testify.sample.test
        - test_runner: androidx.test.runner.AndroidJUnitRunner
        - verbose: false
    - custom-test-results-export@1.0:
        is_always_run: true
        timeout: 120
        inputs:
        - test_name: Legacy Sample Screenshot Test
        - search_pattern: "**test_result_**.xml**"
    - deploy-to-bitrise-io@2:
        inputs:
        - notify_user_groups: none
    - github-status@3:
        run_if: .IsCI
        inputs:
        - auth_token: $GITHUB_TOKEN
        - status_identifier: "Legacy Sample"
        - pipeline_build_url: "$BITRISE_BUILD_URL"
    before_run:
    - _globalSetup
    - _emulatorSetup

  test_library:
    summary: Run your Android unit tests and get the test report.
    description: The workflow will first clone your Git repository, cache your Gradle
      dependencies, install Android tools, run your Android unit tests and save the
      test report.
    steps:
    - gradle-runner@2:
        inputs:
        - gradlew_path: "./gradlew"
        - gradle_task: Library:ktlint
        title: KtLint
    - android-unit-test@1:
        inputs:
        - project_location: "$PROJECT_LOCATION"
        - variant: Debug
        - module: Library
        - cache_level: none
    - gradle-runner@2:
        inputs:
        - gradlew_path: "./gradlew"
        - gradle_task: Library:assembleDebugAndroidTest
        title: Build Test APK
    - android-instrumented-test@0:
        inputs:
        - test_apk_path: "./Library/build/outputs/apk/androidTest/debug/testify-debug-androidTest.apk"
        - main_apk_path: "./Library/build/outputs/apk/androidTest/debug/testify-debug-androidTest.apk"
    - deploy-to-bitrise-io@2:
        inputs:
        - notify_user_groups: none
    - github-status@3:
        run_if: .IsCI
        inputs:
        - auth_token: $GITHUB_TOKEN
        - status_identifier: "Library"
        - pipeline_build_url: "$BITRISE_BUILD_URL"
    before_run:
    - _globalSetup
    - _emulatorSetup

  test_plugin:
    steps:
    - gradle-runner@2:
        inputs:
          - gradlew_path: "./gradlew"
          - gradle_task: Plugin:ktlint
        title: KtLint
    - gradle-unit-test@1:
        inputs:
          - gradlew_file_path: ./gradlew
          - unit_test_task: Plugin:test
    - gradle-runner@2:
        inputs:
          - gradlew_path: "./gradlew"
          - gradle_task: Plugin:assemble Plugin:assembleLocal
        title: Validate build
    - deploy-to-bitrise-io@2:
        inputs:
        - notify_user_groups: none
    - github-status@3:
        run_if: .IsCI
        inputs:
        - auth_token: $GITHUB_TOKEN
        - status_identifier: "Plugin"
        - pipeline_build_url: "$BITRISE_BUILD_URL"
    before_run:
    - _globalSetup

  test_accessibility_ext:
    steps:
    - gradle-runner@2:
        inputs:
          - gradlew_path: "./gradlew"
          - gradle_task: Accessibility:ktlint
        title: KtLint
    - gradle-runner@2:
        inputs:
          - gradlew_path: "./gradlew"
          - gradle_task: Accessibility:assemble
        title: Validate build
    - github-status@3:
        run_if: .IsCI
        inputs:
        - auth_token: $GITHUB_TOKEN
        - status_identifier: "Accessibility Extension"
        - pipeline_build_url: "$BITRISE_BUILD_URL"
    before_run:
    - _globalSetup
    meta:
      bitrise.io:
        stack: linux-docker-android-22.04
        machine_type_id: standard

  test_compose_ext:
    steps:
    - gradle-runner@2:
        inputs:
          - gradlew_path: "./gradlew"
          - gradle_task: ComposeExtensions:ktlint
        title: KtLint
    - gradle-runner@2:
        inputs:
          - gradlew_path: "./gradlew"
          - gradle_task: ComposeExtensions:assemble
        title: Validate build
    - github-status@3:
        run_if: .IsCI
        inputs:
        - auth_token: $GITHUB_TOKEN
        - status_identifier: "Compose Extension"
        - pipeline_build_url: "$BITRISE_BUILD_URL"
    before_run:
    - _globalSetup
    meta:
      bitrise.io:
        stack: linux-docker-android-22.04
        machine_type_id: standard

  test_fullscreen_ext:
    steps:
    - gradle-runner@2:
        inputs:
          - gradlew_path: "./gradlew"
          - gradle_task: FullscreenCaptureMethod:ktlint
        title: KtLint
    - gradle-runner@2:
        inputs:
          - gradlew_path: "./gradlew"
          - gradle_task: FullscreenCaptureMethod:assemble
        title: Validate build
    - github-status@3:
        run_if: .IsCI
        inputs:
        - auth_token: $GITHUB_TOKEN
        - status_identifier: "Fullscreen Extension"
        - pipeline_build_url: "$BITRISE_BUILD_URL"
    before_run:
    - _globalSetup
    meta:
      bitrise.io:
        stack: linux-docker-android-22.04
        machine_type_id: standard

  test_flix:
    summary: Run your Android unit tests and get the test report.
    description: The workflow will first clone your Git repository, cache your Gradle
      dependencies, install Android tools, run your Android unit tests and save the
      test report.
    steps:
    - android-unit-test@1:
        inputs:
        - project_location: "$PROJECT_LOCATION"
        - variant: Debug
        - module: FlixSample
        - cache_level: none
    - android-unit-test@1:
        inputs:
        - project_location: "$PROJECT_LOCATION"
        - variant: Debug
        - module: FlixLibrary
        - cache_level: none
    - android-build-for-ui-testing@0:
        inputs:
        - variant: Debug
        - module: FlixSample
    - git::https://github.com/ndtp/bitrise-step-android-testify.git@main:
        timeout: 1800
        title: Run Screenshot Tests
        inputs:
        - adb_command: "./gradlew FlixSample:screenshotTest"
        - module: ":FlixSample"
        - app_apk: "./Samples/Flix/build/outputs/apk/debug/FlixSample-debug.apk"
        - app_package: dev.testify.samples.flix
        - test_apk: "./Samples/Flix/build/outputs/apk/androidTest/debug/FlixSample-debug-androidTest.apk"
        - test_package: dev.testify.samples.flix.test
        - test_runner: androidx.test.runner.AndroidJUnitRunner
        - verbose: false
    - github-status@3:
        run_if: .IsCI
        inputs:
        - auth_token: $GITHUB_TOKEN
        - status_identifier: "Flix Sample App"
        - pipeline_build_url: "$BITRISE_BUILD_URL"
    - android-build@1:
        inputs:
        - variant: DebugAndroidTest
        - module: FlixLibrary
    - git::https://github.com/ndtp/bitrise-step-android-testify.git@main:
        timeout: 1800
        title: Run Screenshot Tests
        inputs:
        - adb_command: "./gradlew FlixLibrary:screenshotTest"
        - module: ":FlixLibrary"
        - app_apk: "./Samples/Flix/FlixLibrary/build/outputs/apk/androidTest/debug/FlixLibrary-debug-androidTest.apk"
        - app_package: dev.testify.samples.flix.library.test
        - test_apk: "./Samples/Flix/FlixLibrary/build/outputs/apk/androidTest/debug/FlixLibrary-debug-androidTest.apk"
        - test_package: dev.testify.samples.flix.library.test
        - test_runner: androidx.test.runner.AndroidJUnitRunner
        - verbose: true
    - custom-test-results-export@1.0:
        is_always_run: true
        timeout: 120
        inputs:
        - test_name: Flix Screenshot Test
        - search_pattern: "**test_result_**.xml**"
    - deploy-to-bitrise-io@2:
        inputs:
        - notify_user_groups: none
    - github-status@3:
        run_if: .IsCI
        inputs:
        - auth_token: $GITHUB_TOKEN
        - status_identifier: "Flix Sample Library"
        - pipeline_build_url: "$BITRISE_BUILD_URL"
    before_run:
    - _globalSetup
    - _emulatorSetup


meta:
  bitrise.io:
    stack: linux-docker-android-22.04
    machine_type_id: elite
app:
  envs:
  - opts:
      is_expand: false
    PROJECT_LOCATION: "."
  - opts:
      is_expand: false
    MODULE: LegacySample
  - opts:
      is_expand: false
    VARIANT: Debug
trigger_map:
- pull_request_source_branch: "*"
  pipeline: default

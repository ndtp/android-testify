---
format_version: '11'
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git
project_type: android
workflows:
  _emulatorSetup:
    summary: Run your Android unit tests and get the test report.
    description: The workflow will first clone your Git repository, cache your Gradle
      dependencies, install Android tools, run your Android unit tests and save the
      test report.
    steps:
    - avd-manager@1:
        timeout: 240
        inputs:
        - api_level: '29'
        - start_command_flags: "-camera-back none -camera-front none -no-window -gpu
            swiftshader_indirect -no-snapshot -noaudio -no-boot-anim -partition-size
            6144"
        - profile: pixel_3a
        title: 'Emulator: Launch'
    - wait-for-android-emulator@1:
        timeout: 300
        title: 'Emulator: Wait'
  _globalSetup:
    summary: Run your Android unit tests and get the test report.
    description: The workflow will first clone your Git repository, cache your Gradle
      dependencies, install Android tools, run your Android unit tests and save the
      test report.
    steps:
    - git-clone@8: {}
    - set-java-version@1:
        inputs:
        - set_java_version: '17'
    - install-missing-android-tools@3:
        inputs:
        - gradlew_path: "$PROJECT_LOCATION/gradlew"
  _testLegacySample:
    summary: Run your Android unit tests and get the test report.
    description: The workflow will first clone your Git repository, cache your Gradle
      dependencies, install Android tools, run your Android unit tests and save the
      test report.
    steps:
    - android-unit-test@1:
        inputs:
        - project_location: "$PROJECT_LOCATION"
        - variant: Debug
        - module: LegacySample
        - cache_level: none
    - android-build-for-ui-testing@0:
        inputs:
        - variant: Debug
        - module: LegacySample
    - git::https://github.com/ndtp/bitrise-step-android-testify.git@main:
        timeout: 1800
        title: Run Screenshot Tests
        inputs:
        - adb_command: "./gradlew LegacySample:screenshotTest"
        - module: ":LegacySample"
        - app_apk: "./Samples/Legacy/build/outputs/apk/debug/LegacySample-debug.apk"
        - app_package: dev.testify.sample
        - test_apk: "./Samples/Legacy/build/outputs/apk/androidTest/debug/LegacySample-debug-androidTest.apk"
        - test_package: dev.testify.sample.test
        - test_runner: androidx.test.runner.AndroidJUnitRunner
        - verbose: false
    - custom-test-results-export@1.0:
        is_always_run: true
        timeout: 120
        inputs:
        - test_name: Legacy Sample Screenshot Test
        - search_pattern: "**test_result_**.xml**"
    - script@1:
        is_always_run: true
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -e
            set -x
            if [ "$BITRISE_BUILD_STATUS" == 0 ]; then
                STATUS=":white_check_mark: Success!"
                MESSAGE=""
            else
                STATUS=":x: Failed!"
                MESSAGE="Please verify the screenshot tests and update them as necessary"
            fi
            envman add --key LAST_COMMIT --value `git log --format="%H" -n 1`
            envman add --key TESTIFY_STATUS --value "$STATUS"
            envman add --key TESTIFY_MESSAGE --value "$MESSAGE"
        title: Prepare PR comment
    - comment-on-github-pull-request@0:
        is_always_run: true
        inputs:
        - body: |-
            ### $TESTIFY_STATUS - <a href="https://app.bitrise.io/app/8bee1dcb-c321-4d26-a54e-0123ee4df70f/addon/addons-testing/login_page?build_slug=$BITRISE_BUILD_SLUG">Legacy Sample screenshot test results</a>
            $TESTIFY_MESSAGE
            ###### [View build](https://app.bitrise.io/build/$BITRISE_BUILD_SLUG) for commit $LAST_COMMIT
            <!--
        - update_comment_tag: testify-legacy
        - personal_access_token: "$GITHUB_TOKEN"
  _testLibrary:
    summary: Run your Android unit tests and get the test report.
    description: The workflow will first clone your Git repository, cache your Gradle
      dependencies, install Android tools, run your Android unit tests and save the
      test report.
    steps:
    - gradle-runner@2:
        inputs:
        - gradlew_path: "./gradlew"
        - gradle_task: Library:ktlint
        title: KtLint
    - android-unit-test@1:
        inputs:
        - project_location: "$PROJECT_LOCATION"
        - variant: Debug
        - module: Library
        - cache_level: none
    - gradle-runner@2:
        inputs:
        - gradlew_path: "./gradlew"
        - gradle_task: Library:assembleDebugAndroidTest
        title: Build Test APK
    - android-instrumented-test@0:
        inputs:
        - test_apk_path: "./Library/build/outputs/apk/androidTest/debug/testify-debug-androidTest.apk"
        - main_apk_path: "./Library/build/outputs/apk/androidTest/debug/testify-debug-androidTest.apk"
  _testPlugin:
    steps:
      - gradle-runner@2:
          inputs:
            - gradlew_path: "./gradlew"
            - gradle_task: Plugin:ktlint
          title: KtLint
      - gradle-unit-test@1:
          inputs:
            - gradlew_file_path: ./gradlew
            - unit_test_task: Plugin:test
      - gradle-runner@2:
          inputs:
            - gradlew_path: "./gradlew"
            - gradle_task: Plugin:assemble Plugin:assembleLocal
          title: Validate build
  verifyPr:
    before_run:
    - _globalSetup
    - _emulatorSetup
    after_run:
    - _testLibrary
    - _testPlugin
    - _testLegacySample
    - _testFlixSample
    - _testFlixLibrary
    - _report
  _testFlixSample:
    summary: Run your Android unit tests and get the test report.
    description: The workflow will first clone your Git repository, cache your Gradle
      dependencies, install Android tools, run your Android unit tests and save the
      test report.
    steps:
    - android-unit-test@1:
        inputs:
        - project_location: "$PROJECT_LOCATION"
        - variant: Debug
        - module: FlixSample
        - cache_level: none
    - android-build-for-ui-testing@0:
        inputs:
        - variant: Debug
        - module: FlixSample
    - git::https://github.com/ndtp/bitrise-step-android-testify.git@main:
        timeout: 1800
        title: Run Screenshot Tests
        inputs:
        - adb_command: "./gradlew FlixSample:screenshotTest"
        - module: ":FlixSample"
        - app_apk: "./Samples/Flix/build/outputs/apk/debug/FlixSample-debug.apk"
        - app_package: dev.testify.samples.flix
        - test_apk: "./Samples/Flix/build/outputs/apk/androidTest/debug/FlixSample-debug-androidTest.apk"
        - test_package: dev.testify.samples.flix.test
        - test_runner: androidx.test.runner.AndroidJUnitRunner
        - verbose: false
    - custom-test-results-export@1.0:
        is_always_run: true
        timeout: 120
        inputs:
        - test_name: Flix Screenshot Test
        - search_pattern: "**test_result_**.xml**"
    - script@1:
        is_always_run: true
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -e
            set -x
            if [ "$BITRISE_BUILD_STATUS" == 0 ]; then
                STATUS=":white_check_mark: Success!"
                MESSAGE=""
            else
                STATUS=":x: Failed!"
                MESSAGE="Please verify the screenshot tests and update them as necessary"
            fi
            envman add --key LAST_COMMIT --value `git log --format="%H" -n 1`
            envman add --key TESTIFY_STATUS --value "$STATUS"
            envman add --key TESTIFY_MESSAGE --value "$MESSAGE"
        title: Prepare PR comment
    - comment-on-github-pull-request@0:
        is_always_run: true
        inputs:
        - body: |-
            ### $TESTIFY_STATUS - <a href="https://app.bitrise.io/app/8bee1dcb-c321-4d26-a54e-0123ee4df70f/addon/addons-testing/login_page?build_slug=$BITRISE_BUILD_SLUG">Flix Sample screenshot test results</a>
            $TESTIFY_MESSAGE
            ###### [View build](https://app.bitrise.io/build/$BITRISE_BUILD_SLUG) for commit $LAST_COMMIT
            <!--
        - update_comment_tag: testify-flix
        - personal_access_token: "$GITHUB_TOKEN"
  _testFlixLibrary:
    summary: Run your Android unit tests and get the test report.
    description: The workflow will first clone your Git repository, cache your Gradle
      dependencies, install Android tools, run your Android unit tests and save the
      test report.
    steps:
    - android-unit-test@1:
        inputs:
        - project_location: "$PROJECT_LOCATION"
        - variant: Debug
        - module: FlixLibrary
        - cache_level: none
    - android-build@1:
        inputs:
        - variant: DebugAndroidTest
        - module: FlixLibrary
    - git::https://github.com/ndtp/bitrise-step-android-testify.git@main:
        timeout: 1800
        title: Run Screenshot Tests
        inputs:
        - adb_command: "./gradlew FlixLibrary:screenshotTest"
        - module: ":FlixLibrary"
        - app_apk: "./Samples/Flix/FlixLibrary/build/outputs/apk/androidTest/debug/FlixLibrary-debug-androidTest.apk"
        - app_package: dev.testify.samples.flix.library.test
        - test_apk: "./Samples/Flix/FlixLibrary/build/outputs/apk/androidTest/debug/FlixLibrary-debug-androidTest.apk"
        - test_package: dev.testify.samples.flix.library.test
        - test_runner: androidx.test.runner.AndroidJUnitRunner
        - verbose: true
    - custom-test-results-export@1.0:
        is_always_run: true
        timeout: 120
        inputs:
        - test_name: Flix Libray Screenshot Test
        - search_pattern: "**test_result_**.xml**"
    - script@1:
        is_always_run: true
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -e
            set -x
            if [ "$BITRISE_BUILD_STATUS" == 0 ]; then
                STATUS=":white_check_mark: Success!"
                MESSAGE=""
            else
                STATUS=":x: Failed!"
                MESSAGE="Please verify the screenshot tests and update them as necessary"
            fi
            envman add --key LAST_COMMIT --value `git log --format="%H" -n 1`
            envman add --key TESTIFY_STATUS --value "$STATUS"
            envman add --key TESTIFY_MESSAGE --value "$MESSAGE"
        title: Prepare PR comment
    - comment-on-github-pull-request@0:
        is_always_run: true
        inputs:
        - body: |-
            ### $TESTIFY_STATUS - <a href="https://app.bitrise.io/app/8bee1dcb-c321-4d26-a54e-0123ee4df70f/addon/addons-testing/login_page?build_slug=$BITRISE_BUILD_SLUG">Flix Library screenshot test results</a>
            $TESTIFY_MESSAGE
            ###### [View build](https://app.bitrise.io/build/$BITRISE_BUILD_SLUG) for commit $LAST_COMMIT
            <!--
        - update_comment_tag: testify-flix-library
        - personal_access_token: "$GITHUB_TOKEN"
  _report:
    summary: Collect test reports.
    steps:
    - deploy-to-bitrise-io@2:
        inputs:
        - notify_user_groups: none
  publish:
    summary: Publish to Sonatype
    steps:
    - git-clone@8:
        inputs:
        - fetch_tags: "yes"
        - merge_pr: "no"
    - set-java-version@1:
        inputs:
        - set_java_version: "17"
    - install-missing-android-tools@3:
        inputs:
        - gradlew_path: $PROJECT_LOCATION/gradlew
    - script@1:
        is_always_run: true
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -e
            set -x
            if [ "$RELEASE_TAG" == "" ]; then
                echo "RELEASE_TAG required"
                exit 1
            fi
            git fetch origin
            git tag | grep $RELEASE_TAG
            git checkout $RELEASE_TAG
        title: Verify preconditions
    - gradle-runner@2:
        inputs:
        - gradlew_path: "./gradlew"
        - gradle_task: Library:publish
        title: Publish Library
    - gradle-runner@2:
        inputs:
        - gradlew_path: "./gradlew"
        - gradle_task: Plugin:publish
        title: Publish Plugin
    - gradle-runner@2:
        inputs:
        - gradlew_path: "./gradlew"
        - gradle_task: ComposeExtensions:publish
        title: Publish ComposeExtensions
    - gradle-runner@2:
        inputs:
        - gradlew_path: "./gradlew"
        - gradle_task: Accessibility:publish
        title: Publish Accessibility
    - gradle-runner@2:
        inputs:
        - gradlew_path: "./gradlew"
        - gradle_task: FullscreenCaptureMethod:publish
        title: Publish FullscreenCaptureMethod
meta:
  bitrise.io:
    stack: linux-docker-android-20.04
    machine_type_id: elite
app:
  envs:
  - opts:
      is_expand: false
    PROJECT_LOCATION: "."
  - opts:
      is_expand: false
    MODULE: LegacySample
  - opts:
      is_expand: false
    VARIANT: Debug
trigger_map:
- pull_request_source_branch: "*"
  workflow: verifyPr

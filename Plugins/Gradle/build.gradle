import org.jetbrains.kotlin.gradle.dsl.JvmTarget
import org.jetbrains.kotlin.gradle.tasks.KotlinJvmCompile

plugins {
    id 'java-gradle-plugin'
    id 'groovy'
    id 'org.jetbrains.kotlin.jvm'
    id 'org.jetbrains.dokka'
    id 'jacoco'
}

def gradleProperties = new Properties()
file("../../gradle.properties").withInputStream { gradleProperties.load(it) }

ext {
    pom = [
            publishedGroupId  : 'dev.testify',
            artifact          : 'dev.testify.gradle.plugin',
            libraryName       : 'testify-plugin',
            libraryDescription: 'Android screenshot instrumentation tests plugin.',
            siteUrl           : 'https://github.com/ndtp/android-testify',
            gitUrl            : 'https://github.com/ndtp/android-testify.git',
            licenseName       : 'The MIT License',
            licenseUrl        : 'https://opensource.org/licenses/MIT',
            author            : 'ndtp'
    ]
}

version = gradleProperties.getProperty('testify_version')
group = pom.publishedGroupId

gradlePlugin {
    automatedPublishing = false
    plugins {
        testifyPlugin {
            id = 'dev.testify'
            implementationClass = 'dev.testify.TestifyPlugin'
        }
    }
}

test {
    jacoco {
        enabled = true
    }
    finalizedBy jacocoTestReport
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        outputs.upToDateWhen { false }
        showStandardStreams = true
    }
}

dependencies {
    implementation gradleApi()
    implementation libs.gradle
    implementation libs.kotlin.stdlib.jdk8

    testRuntimeOnly libs.junit.platform.launcher
    testImplementation gradleTestKit()
    testImplementation libs.junit.jupiter
    testImplementation libs.junit.jupiter.params
    testImplementation libs.mockk
    testImplementation libs.truth.v120
}

tasks.named('test', Test) {
    useJUnitPlatform()
}

tasks.withType(KotlinJvmCompile).configureEach {
    compilerOptions {
        jvmTarget.set(JvmTarget.JVM_21)
        freeCompilerArgs.add("-opt-in=kotlin.RequiresOptIn")
    }
}

jar {
    manifest {
        attributes "Implementation-Title": "Testify"
        attributes "Implementation-Vendor": "ndtp"
        attributes "Implementation-Version": archiveVersion
    }
}

tasks.register('sourcesJar', Jar) {
    from sourceSets.main.groovy.srcDirs
    archiveClassifier = 'sources'
}

tasks.register('javadocJar', Jar) {
    dependsOn dokkaJavadoc
    archiveClassifier.set('javadoc')
    archiveBaseName.set('testify')
    from dokkaJavadoc.outputDirectory
}

apply from: "../../publish.build.gradle"
apply from: '../../ktlint.gradle'

jacoco {
    toolVersion = "0.8.8"
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

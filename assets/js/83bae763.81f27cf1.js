"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4513],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return f}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=u(n),f=a,m=p["".concat(c,".").concat(f)]||p[f]||l[f]||o;return n?r.createElement(m,i(i({ref:t},d),{},{components:n})):r.createElement(m,i({ref:t},d))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=p;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},6324:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return l}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],s={},c="Write a test",u={unversionedId:"get-started/write-a-test",id:"get-started/write-a-test",title:"Write a test",description:"Testify is a subclass of Android's ActivityTestRule. The testing framework launches the activity under test before each test method annotated with @Test and before any method annotated with @Before.",source:"@site/docs/get-started/3-write-a-test.md",sourceDirName:"get-started",slug:"/get-started/write-a-test",permalink:"/android-testify/docs/get-started/write-a-test",draft:!1,editUrl:"https://github.com/ndtp/android-testify/tree/issue-12/docusaurus/docs/docs/get-started/3-write-a-test.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Configure your emulator to run Testify tests",permalink:"/android-testify/docs/get-started/configuring-an-emulator"},next:{title:"Update your baseline",permalink:"/android-testify/docs/get-started/update-baseline"}},d={},l=[],p={toc:l};function f(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"write-a-test"},"Write a test"),(0,o.kt)("p",null,"Testify is a subclass of Android's ",(0,o.kt)("a",{parentName:"p",href:"https://developer.android.com/reference/androidx/test/rule/ActivityTestRule.html"},(0,o.kt)("inlineCode",{parentName:"a"},"ActivityTestRule")),". The testing framework launches the activity under test before each test method annotated with ",(0,o.kt)("a",{parentName:"p",href:"https://junit.org/junit4/javadoc/latest/org/junit/Test.html"},(0,o.kt)("inlineCode",{parentName:"a"},"@Test"))," and before any method annotated with ",(0,o.kt)("a",{parentName:"p",href:"http://junit.sourceforge.net/javadoc/org/junit/Before.html"},(0,o.kt)("inlineCode",{parentName:"a"},"@Before")),". "),(0,o.kt)("p",null,"Each screenshot test method must be annotated with the ",(0,o.kt)("inlineCode",{parentName:"p"},"@ScreenshotInstrumentation")," annotation."),(0,o.kt)("p",null,"Within your test method, you can configure the ",(0,o.kt)("inlineCode",{parentName:"p"},"Activity")," as needed and call ",(0,o.kt)("inlineCode",{parentName:"p"},"assertSame()")," to capture and validate your UI. The framework handles shutting down the activity after the test finishes and all methods annotated with ",(0,o.kt)("a",{parentName:"p",href:"http://junit.sourceforge.net/javadoc/org/junit/After.html"},(0,o.kt)("inlineCode",{parentName:"a"},"@After"))," are run."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"@RunWith(AndroidJUnit4::class)\nclass MainActivityScreenshotTest {\n\n    @get:Rule var rule = ScreenshotRule(MainActivity::class.java)\n\n    @ScreenshotInstrumentation\n    @Test\n    fun default() {\n        rule.assertSame()\n    }\n}\n")))}f.isMDXComponent=!0}}]);
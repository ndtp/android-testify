"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2424],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(n),m=o,f=u["".concat(l,".").concat(m)]||u[m]||d[m]||a;return n?r.createElement(f,s(s({ref:t},p),{},{components:n})):r.createElement(f,s({ref:t},p))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:o,s[1]=i;for(var c=2;c<a;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1551:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const a={},s="Testing with different Locales and Font Scales",i={unversionedId:"extensions/compose/resource-wrapping",id:"version-2.0.0-rc02/extensions/compose/resource-wrapping",title:"Testing with different Locales and Font Scales",description:"Locales",source:"@site/versioned_docs/version-2.0.0-rc02/extensions/compose/4-resource-wrapping.md",sourceDirName:"extensions/compose",slug:"/extensions/compose/resource-wrapping",permalink:"/android-testify/docs/2.0.0-rc02/extensions/compose/resource-wrapping",draft:!1,editUrl:"https://github.com/ndtp/android-testify/tree/issue-12/docusaurus/docs/versioned_docs/version-2.0.0-rc02/extensions/compose/4-resource-wrapping.md",tags:[],version:"2.0.0-rc02",sidebarPosition:4,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Interoperability with ComposeTestRule",permalink:"/android-testify/docs/2.0.0-rc02/extensions/compose/compose-test-rule"},next:{title:"Fullscreen Capture Method",permalink:"/android-testify/docs/2.0.0-rc02/category/fullscreen-capture-method"}},l={},c=[{value:"Locales",id:"locales",level:2},{value:"Example",id:"example",level:3},{value:"Font Scale",id:"font-scale",level:2}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"testing-with-different-locales-and-font-scales"},"Testing with different Locales and Font Scales"),(0,o.kt)("h2",{id:"locales"},"Locales"),(0,o.kt)("p",null,"It is often desirable to test your composable in multiple locales. Testify allows you to dynamically change the locale on a per-test basis. "),(0,o.kt)("p",null,"When using ",(0,o.kt)("inlineCode",{parentName:"p"},"ComposableScreenshotRule"),", you can invoke the ",(0,o.kt)("inlineCode",{parentName:"p"},"setLocale()")," method to set the Locale used in your test. ",(0,o.kt)("inlineCode",{parentName:"p"},"setLocale")," accepts any valid ",(0,o.kt)("a",{parentName:"p",href:"https://docs.oracle.com/javase/7/docs/api/java/util/Locale.html"},"Locale")," instance."),(0,o.kt)("h3",{id:"example"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'\n    // In the res/values/strings.xml file\n    // <string name="example">A short example</string>\n\n    // In the res/values-fr/strings.xml file\n    // <string name="example">Un petit exemple</string>\n\n    @ScreenshotInstrumentation\n    @Test\n    fun localeFrance() {\n        rule\n            .setCompose {\n                Text(stringResource(R.string.example))\n            }\n            .setLocale(Locale.FRANCE)\n            .assertSame()\n    }\n')),(0,o.kt)("h2",{id:"font-scale"},"Font Scale"),(0,o.kt)("p",null,"Testify allows you to change the current scaling factor for fonts, relative to the base density scaling. This allows you to simulate the impact of a user modifying the default font size on their device, such as tiny, large or huge."),(0,o.kt)("p",null,"See ",(0,o.kt)("a",{parentName:"p",href:"https://support.google.com/accessibility/android/answer/6006972?hl=en"},"Font size and display size")),(0,o.kt)("p",null,"To modify the font scale in a single test, use the ",(0,o.kt)("inlineCode",{parentName:"p"},"setFontScale()")," method."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'    @ScreenshotInstrumentation\n    @Test\n    fun largeFontScale() {\n        rule\n            Text(\n                text = "Test",\n                fontSize = 16.sp\n            )\n            .setFontScale(3.0f)\n            .assertSame()\n    }\n')))}u.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4629],{3905:(e,t,o)=>{o.d(t,{Zo:()=>c,kt:()=>f});var n=o(7294);function a(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function r(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function s(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?r(Object(o),!0).forEach((function(t){a(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):r(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function l(e,t){if(null==e)return{};var o,n,a=function(e,t){if(null==e)return{};var o,n,a={},r=Object.keys(e);for(n=0;n<r.length;n++)o=r[n],t.indexOf(o)>=0||(a[o]=e[o]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)o=r[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(a[o]=e[o])}return a}var i=n.createContext({}),u=function(e){var t=n.useContext(i),o=t;return e&&(o="function"==typeof e?e(t):s(s({},t),e)),o},c=function(e){var t=u(e.components);return n.createElement(i.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var o=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(o),d=a,f=p["".concat(i,".").concat(d)]||p[d]||m[d]||r;return o?n.createElement(f,s(s({ref:t},c),{},{components:o})):n.createElement(f,s({ref:t},c))}));function f(e,t){var o=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=o.length,s=new Array(r);s[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[p]="string"==typeof e?e:a,s[1]=l;for(var u=2;u<r;u++)s[u]=o[u];return n.createElement.apply(null,s)}return n.createElement.apply(null,o)}d.displayName="MDXCreateElement"},5162:(e,t,o)=>{o.d(t,{Z:()=>s});var n=o(7294),a=o(6010);const r={tabItem:"tabItem_Ymn6"};function s(e){let{children:t,hidden:o,className:s}=e;return n.createElement("div",{role:"tabpanel",className:(0,a.Z)(r.tabItem,s),hidden:o},t)}},5488:(e,t,o)=>{o.d(t,{Z:()=>m});var n=o(7462),a=o(7294),r=o(6010),s=o(2389),l=o(7392),i=o(7094),u=o(2466);const c={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function p(e){const{lazy:t,block:o,defaultValue:s,values:p,groupId:m,className:d}=e,f=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),b=p??f.map((e=>{let{props:{value:t,label:o,attributes:n}}=e;return{value:t,label:o,attributes:n}})),h=(0,l.l)(b,((e,t)=>e.value===t.value));if(h.length>0)throw new Error(`Docusaurus error: Duplicate values "${h.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const y=null===s?s:s??f.find((e=>e.props.default))?.props.value??f[0].props.value;if(null!==y&&!b.some((e=>e.value===y)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${y}" but none of its children has the corresponding value. Available values are: ${b.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:v,setTabGroupChoices:T}=(0,i.U)(),[g,C]=(0,a.useState)(y),k=[],{blockElementScrollPositionUntilNextRender:x}=(0,u.o5)();if(null!=m){const e=v[m];null!=e&&e!==g&&b.some((t=>t.value===e))&&C(e)}const w=e=>{const t=e.currentTarget,o=k.indexOf(t),n=b[o].value;n!==g&&(x(t),C(n),null!=m&&T(m,String(n)))},R=e=>{let t=null;switch(e.key){case"ArrowRight":{const o=k.indexOf(e.currentTarget)+1;t=k[o]??k[0];break}case"ArrowLeft":{const o=k.indexOf(e.currentTarget)-1;t=k[o]??k[k.length-1];break}}t?.focus()};return a.createElement("div",{className:(0,r.Z)("tabs-container",c.tabList)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":o},d)},b.map((e=>{let{value:t,label:o,attributes:s}=e;return a.createElement("li",(0,n.Z)({role:"tab",tabIndex:g===t?0:-1,"aria-selected":g===t,key:t,ref:e=>k.push(e),onKeyDown:R,onFocus:w,onClick:w},s,{className:(0,r.Z)("tabs__item",c.tabItem,s?.className,{"tabs__item--active":g===t})}),o??t)}))),t?(0,a.cloneElement)(f.filter((e=>e.props.value===g))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},f.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==g})))))}function m(e){const t=(0,s.Z)();return a.createElement(p,(0,n.Z)({key:String(t)},e))}},9640:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>f,frontMatter:()=>l,metadata:()=>u,toc:()=>p});var n=o(7462),a=(o(7294),o(3905)),r=o(5488),s=o(5162);const l={},i="Interoperability with ComposeTestRule",u={unversionedId:"extensions/compose/compose-test-rule",id:"extensions/compose/compose-test-rule",title:"Interoperability with ComposeTestRule",description:"A ComposeTestRule is a TestRule that allows you to test and control composables and applications using Compose. You can read more about Testing your Compose layout here.",source:"@site/docs/extensions/compose/3-compose-test-rule.md",sourceDirName:"extensions/compose",slug:"/extensions/compose/compose-test-rule",permalink:"/android-testify/docs/extensions/compose/compose-test-rule",draft:!1,editUrl:"https://github.com/ndtp/android-testify/tree/issue-12/docusaurus/docs/docs/extensions/compose/3-compose-test-rule.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Test a Composable",permalink:"/android-testify/docs/extensions/compose/test"},next:{title:"Testing with different Locales and Font Scales",permalink:"/android-testify/docs/extensions/compose/resource-wrapping"}},c={},p=[{value:"Example",id:"example",level:3}],m={toc:p},d="wrapper";function f(e){let{components:t,...o}=e;return(0,a.kt)(d,(0,n.Z)({},m,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"interoperability-with-composetestrule"},"Interoperability with ComposeTestRule"),(0,a.kt)("p",null,"A ",(0,a.kt)("a",{parentName:"p",href:"https://developer.android.com/reference/kotlin/androidx/compose/ui/test/junit4/ComposeTestRule"},"ComposeTestRule")," is a ",(0,a.kt)("a",{parentName:"p",href:"https://junit.org/junit4/javadoc/4.12/org/junit/rules/TestRule.html"},"TestRule")," that allows you to test and control composables and applications using Compose. You can read more about ",(0,a.kt)("a",{parentName:"p",href:"https://developer.android.com/jetpack/compose/testing"},"Testing your Compose layout here"),"."),(0,a.kt)("p",null,"The Testify Compose extension provides a default ",(0,a.kt)("inlineCode",{parentName:"p"},"ComposeRule"),", or you can specify your own."),(0,a.kt)("p",null,"To specify your own ",(0,a.kt)("inlineCode",{parentName:"p"},"ComposeRule")," instance, pass the instance to the ",(0,a.kt)("inlineCode",{parentName:"p"},"composeTestRule")," argument on the ",(0,a.kt)("inlineCode",{parentName:"p"},"ComposableScreenshotRule")," constructor."),(0,a.kt)("p",null,"You have access to the ",(0,a.kt)("inlineCode",{parentName:"p"},"ComposeRule")," instance through the ",(0,a.kt)("inlineCode",{parentName:"p"},"setComposeActions()")," method. The ",(0,a.kt)("inlineCode",{parentName:"p"},"ComposeRule")," is provided as the first argument, ",(0,a.kt)("inlineCode",{parentName:"p"},"composeTestRule"),"."),(0,a.kt)("h3",{id:"example"},"Example"),(0,a.kt)(r.Z,{mdxType:"Tabs"},(0,a.kt)(s.Z,{value:"test",label:"ComposableScreenshotRule",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'class ComposableScreenshotTest {\n    @get:Rule\n    val rule = ComposableScreenshotRule(composeTestRule = createAndroidComposeRule(ComposableTestActivity::class.java))\n\n    @ScreenshotInstrumentation\n    @Test\n    fun default() {\n        rule\n            .setCompose {\n                var text by remember { mutableStateOf("") }\n                TextField(\n                    value = text,\n                    onValueChange = { text = it },\n                    modifier = Modifier.testTag("field")\n                )\n            }\n            .setComposeActions { composeTestRule ->\n                composeTestRule.onNodeWithTag("field").performTextInput("testify")\n            }\n            .assertSame()\n    }\n}\n'))),(0,a.kt)(s.Z,{value:"scenario",label:"ComposableScreenshotScenarioRule",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'class ComposableScreenshotTest {\n    @get:Rule\n    val rule = ComposableScreenshotRule(composeTestRule = createAndroidComposeRule(ComposableTestActivity::class.java))\n\n    @ScreenshotInstrumentation\n    @Test\n    fun default() {\n        launchComposableTestActivity().use { scenario ->\n            rule\n                .withScenario(scenario)\n                .setCompose {\n                    var text by remember { mutableStateOf("") }\n                    TextField(\n                        value = text,\n                        onValueChange = { text = it },\n                        modifier = Modifier.testTag("field")\n                    )\n                }\n                .setComposeActions { composeTestRule ->\n                    composeTestRule.onNodeWithTag("field").performTextInput("testify")\n                }\n                .assertSame()\n        }\n    }\n}\n')))))}f.isMDXComponent=!0}}]);
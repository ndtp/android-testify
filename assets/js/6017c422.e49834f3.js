"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9004],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(n),d=a,f=p["".concat(l,".").concat(d)]||p[d]||m[d]||o;return n?r.createElement(f,i(i({ref:t},u),{},{components:n})):r.createElement(f,i({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(7294),a=n(6010);const o={tabItem:"tabItem_Ymn6"};function i(e){let{children:t,hidden:n,className:i}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(o.tabItem,i),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>m});var r=n(7462),a=n(7294),o=n(6010),i=n(2389),s=n(7392),l=n(7094),c=n(2466);const u={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function p(e){const{lazy:t,block:n,defaultValue:i,values:p,groupId:m,className:d}=e,f=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),h=p??f.map((e=>{let{props:{value:t,label:n,attributes:r}}=e;return{value:t,label:n,attributes:r}})),b=(0,s.l)(h,((e,t)=>e.value===t.value));if(b.length>0)throw new Error(`Docusaurus error: Duplicate values "${b.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const g=null===i?i:i??f.find((e=>e.props.default))?.props.value??f[0].props.value;if(null!==g&&!h.some((e=>e.value===g)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${g}" but none of its children has the corresponding value. Available values are: ${h.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:v,setTabGroupChoices:y}=(0,l.U)(),[k,w]=(0,a.useState)(g),N=[],{blockElementScrollPositionUntilNextRender:T}=(0,c.o5)();if(null!=m){const e=v[m];null!=e&&e!==k&&h.some((t=>t.value===e))&&w(e)}const C=e=>{const t=e.currentTarget,n=N.indexOf(t),r=h[n].value;r!==k&&(T(t),w(r),null!=m&&y(m,String(r)))},x=e=>{let t=null;switch(e.key){case"ArrowRight":{const n=N.indexOf(e.currentTarget)+1;t=N[n]??N[0];break}case"ArrowLeft":{const n=N.indexOf(e.currentTarget)-1;t=N[n]??N[N.length-1];break}}t?.focus()};return a.createElement("div",{className:(0,o.Z)("tabs-container",u.tabList)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},d)},h.map((e=>{let{value:t,label:n,attributes:i}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:k===t?0:-1,"aria-selected":k===t,key:t,ref:e=>N.push(e),onKeyDown:x,onFocus:C,onClick:C},i,{className:(0,o.Z)("tabs__item",u.tabItem,i?.className,{"tabs__item--active":k===t})}),n??t)}))),t?(0,a.cloneElement)(f.filter((e=>e.props.value===k))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},f.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==k})))))}function m(e){const t=(0,i.Z)();return a.createElement(p,(0,r.Z)({key:String(t)},e))}},9248:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>f,frontMatter:()=>s,metadata:()=>c,toc:()=>p});var r=n(7462),a=(n(7294),n(3905)),o=n(5488),i=n(5162);const s={},l="Providing a custom comparison method",c={unversionedId:"recipes/custom-compare",id:"recipes/custom-compare",title:"Providing a custom comparison method",description:"There are many scenarios where",source:"@site/docs/recipes/17-custom-compare.md",sourceDirName:"recipes",slug:"/recipes/custom-compare",permalink:"/android-testify/docs/recipes/custom-compare",draft:!1,editUrl:"https://github.com/ndtp/android-testify/tree/issue-12/docusaurus/docs/docs/recipes/17-custom-compare.md",tags:[],version:"current",sidebarPosition:17,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Customizing the captured bitmap",permalink:"/android-testify/docs/recipes/custom-bitmap"},next:{title:"Configuring Testify to write to the SDCard",permalink:"/android-testify/docs/recipes/sdcard"}},u={},p=[{value:"Ignore differences example",id:"ignore-differences-example",level:3}],m={toc:p},d="wrapper";function f(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"providing-a-custom-comparison-method"},"Providing a custom comparison method"),(0,a.kt)("p",null,"There are many scenarios where"),(0,a.kt)("p",null,"You can leverage the ",(0,a.kt)("inlineCode",{parentName:"p"},"TestifyConfiguration.compareMethod")," configuration function property for this purpose."),(0,a.kt)("p",null,"To configure a custom capture method, provide a function that conforms to the ",(0,a.kt)("inlineCode",{parentName:"p"},"CompareMethod")," signature. "),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"CompareMethod")," is called with the baseline and current bitmaps and expects a boolean result. If you return true, the bitmaps are considered to be the same and the comparison succeeds. If you return false, the bitmaps are considered different and the comparison fails."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"typealias CompareMethod = (baselineBitmap: Bitmap, currentBitmap: Bitmap) -> Boolean\n\n")),(0,a.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"Before writing your own comparison method, consider that Testify provides multiple built-in mechanisms to customize the comparison of bitmaps. You can easily ",(0,a.kt)("a",{parentName:"p",href:"tolerance"},(0,a.kt)("em",{parentName:"a"},"increase the matching tolerance"))," or ",(0,a.kt)("a",{parentName:"p",href:"exclude-regions"},(0,a.kt)("em",{parentName:"a"},"exclude a region from the comparison")),"."),(0,a.kt)("p",{parentName:"div"},"Please also see ",(0,a.kt)("a",{parentName:"p",href:"../../blog/platform-differences"},(0,a.kt)("em",{parentName:"a"},"Accounting for platform differences"))," for more insight into handling unintended differences in your rendering."))),(0,a.kt)("p",null,"You can customize the algorithm used to compare the captured bitmap against the baseline and use this to define a variety of custom comparison algorithms such as allowing a tolerance, or excluding certain values from the comparison."),(0,a.kt)("h3",{id:"ignore-differences-example"},"Ignore differences example"),(0,a.kt)("p",null,"In this example, we build a very simple ",(0,a.kt)("inlineCode",{parentName:"p"},"ComporeMethod"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"ignoreDifferences()"),", which will ignore all differences found in your images."),(0,a.kt)(o.Z,{mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"rule",label:"ScreenshotTestRule",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"@ScreenshotInstrumentation\n@Test\nfun ignoreDifferences() {\n\n    /**\n     * Define a simple comparison method that ignores all differences between the bitmaps by always returning true\n     */\n    fun ignoreDifferences(baselineBitmap: Bitmap, currentBitmap: Bitmap) = true\n\n    rule\n        .setViewModifications {\n            // Set background to a random color\n            val color = \"#${Integer.toHexString(Random.nextInt(0, 16581375)).padStart(6, '0')}\"\n            it.setBackgroundColor(Color.parseColor(color))\n        }\n        .configure { compareMethod = ::ignoreDifferences }\n        .assertSame()\n}\n"))),(0,a.kt)(i.Z,{value:"scenario",label:"ScreenshotScenarioRule",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"@ScreenshotInstrumentation\n@Test\nfun ignoreDifferences() {\n\n    /**\n     * Define a simple comparison method that ignores all differences between the bitmaps by always returning true\n     */\n    fun ignoreDifferences(baselineBitmap: Bitmap, currentBitmap: Bitmap) = true\n\n    launchActivity<TestHarnessActivity>().use { scenario ->\n        rule\n            .withScenario(scenario)\n            .setViewModifications {\n                // Set background to a random color\n                val color = \"#${Integer.toHexString(Random.nextInt(0, 16581375)).padStart(6, '0')}\"\n                it.setBackgroundColor(Color.parseColor(color))\n            }\n            .configure { compareMethod = ::ignoreDifferences }\n            .assertSame()\n    }\n}\n")))))}f.isMDXComponent=!0}}]);
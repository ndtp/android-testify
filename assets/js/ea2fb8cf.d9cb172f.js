"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9242],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=o.createContext({}),l=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=l(e.components);return o.createElement(p.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=l(n),u=a,h=m["".concat(p,".").concat(u)]||m[u]||d[u]||i;return n?o.createElement(h,r(r({ref:t},c),{},{components:n})):o.createElement(h,r({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[m]="string"==typeof e?e:a,r[1]=s;for(var l=2;l<i;l++)r[l]=n[l];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3293:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var o=n(7462),a=(n(7294),n(3905));const i={},r="Test a Composable",s={unversionedId:"extensions/compose/test",id:"extensions/compose/test",title:"Test a Composable",description:"In order to test a @Composable function, you must first declare an instance variable of the ComposableScreenshotRule class. You will be using this rule instead of the default ScreenshotTestRule.",source:"@site/docs/extensions/compose/2-test.md",sourceDirName:"extensions/compose",slug:"/extensions/compose/test",permalink:"/android-testify/docs/extensions/compose/test",draft:!1,editUrl:"https://github.com/ndtp/android-testify/tree/issue-12/docusaurus/docs/docs/extensions/compose/2-test.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Set up testify-compose",permalink:"/android-testify/docs/extensions/compose/setup"},next:{title:"Interoperability with ComposeTestRule",permalink:"/android-testify/docs/extensions/compose/compose-test-rule"}},p={},l=[{value:"ComposableScreenshotScenarioRule",id:"composablescreenshotscenariorule",level:2},{value:"ComposableScreenshotRule",id:"composablescreenshotrule",level:2},{value:"Example",id:"example",level:3}],c={toc:l},m="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"test-a-composable"},"Test a Composable"),(0,a.kt)("p",null,"In order to test a ",(0,a.kt)("inlineCode",{parentName:"p"},"@Composable")," function, you must first declare an instance variable of the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/ndtp/android-testify/blob/main/Ext/Compose/src/main/java/dev/testify/ComposableScreenshotRule.kt"},(0,a.kt)("inlineCode",{parentName:"a"},"ComposableScreenshotRule"))," class. You will be using this rule instead of the default ",(0,a.kt)("inlineCode",{parentName:"p"},"ScreenshotTestRule"),"."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"ComposableScreenshotRule")," provides a ",(0,a.kt)("inlineCode",{parentName:"p"},"setCompose()")," method which accepts a composable function in which you can specify your own custom compositions. You can invoke the ",(0,a.kt)("inlineCode",{parentName:"p"},"setCompose()")," method on the ",(0,a.kt)("inlineCode",{parentName:"p"},"rule")," instance and declare any Compose UI functions you wish to test."),(0,a.kt)("p",null,"The contents of ",(0,a.kt)("inlineCode",{parentName:"p"},"setCompose()")," are rendered as the contents of the provided ",(0,a.kt)("inlineCode",{parentName:"p"},"ComposableTestActivity"),". ",(0,a.kt)("inlineCode",{parentName:"p"},"ComposableTestActivity")," is a simple activity with single root ",(0,a.kt)("a",{parentName:"p",href:"https://developer.android.com/reference/kotlin/androidx/compose/ui/platform/ComposeView"},(0,a.kt)("inlineCode",{parentName:"a"},"ComposeView"))," with a ",(0,a.kt)("inlineCode",{parentName:"p"},"Color.White")," background. "),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"ComposeView")," provided by ",(0,a.kt)("inlineCode",{parentName:"p"},"ComposableTestActivity")," is defined with ",(0,a.kt)("inlineCode",{parentName:"p"},"WRAP_CONTENT")," layout parameters and so the captured image will be constrained to fit only the bounds of the ",(0,a.kt)("inlineCode",{parentName:"p"},"@Composable"),"."),(0,a.kt)("p",null,"If necessary, you can access the root view with the identifier ",(0,a.kt)("inlineCode",{parentName:"p"},"dev.testify.compose.R.id.compose_container"),"."),(0,a.kt)("h2",{id:"composablescreenshotscenariorule"},"ComposableScreenshotScenarioRule"),(0,a.kt)("p",null,"As ",(0,a.kt)("a",{parentName:"p",href:"https://developer.android.com/reference/androidx/test/rule/ActivityTestRule"},"ActivityTestRule is deprecated"),", the Android SDK now recommends the usage of ",(0,a.kt)("a",{parentName:"p",href:"https://developer.android.com/reference/androidx/test/core/app/ActivityScenario"},(0,a.kt)("inlineCode",{parentName:"a"},"ActivityScenario"))," as the modern alternative. Testify provides ",(0,a.kt)("inlineCode",{parentName:"p"},"ComposableScreenshotScenarioRule")," which works in conjunction with ",(0,a.kt)("inlineCode",{parentName:"p"},"ActivityScenario")," to easily add screenshot tests to scenario-based UI tests."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"ComposableScreenshotScenarioRule")," is more flexible than the older ",(0,a.kt)("inlineCode",{parentName:"p"},"ComposableScreenshotRule")," as it no longer requires you to couple the rule's instantiatiation with a specific Activity subclass. This allows the flexibility of testing multiple different activities in the same test class."),(0,a.kt)("p",null,"Screenshot test integration with ",(0,a.kt)("inlineCode",{parentName:"p"},"ActivityScenario")," is achieved via the ",(0,a.kt)("inlineCode",{parentName:"p"},"withScenario()")," function. An active instance of a scenario must be provided to Testify prior to calling ",(0,a.kt)("inlineCode",{parentName:"p"},"assertSame()"),". Typically, this is done by passing the scaneario instance returned by ",(0,a.kt)("a",{parentName:"p",href:"https://developer.android.com/reference/androidx/test/core/app/ActivityScenario#launch(java.lang.Class%3CA%3E)"},(0,a.kt)("inlineCode",{parentName:"a"},"ActivityScenario.launch"))," to the ",(0,a.kt)("inlineCode",{parentName:"p"},"ScreenshotScenarioRule")," instance within a ",(0,a.kt)("inlineCode",{parentName:"p"},"use {}")," block."),(0,a.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"To enable ",(0,a.kt)("a",{parentName:"p",href:"../../get-started/set-up-intellij-plugin"},"Android Studio Plugin")," integration with your tests, each test method should be annotated with the ",(0,a.kt)("inlineCode",{parentName:"p"},"@ScreenshotInstrumentation")," annotation."))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'import androidx.test.core.app.launchActivity\nimport dev.testify.ComposableTestActivity\nimport dev.testify.annotation.ScreenshotInstrumentation\nimport dev.testify.compose.scenario.ComposableScreenshotScenarioRule\nimport org.junit.Rule\nimport org.junit.Test\n\nclass ComposableScreenshotTest {\n\n    @get:Rule val rule = ComposableScreenshotScenarioRule()\n\n    @ScreenshotInstrumentation\n    @Test\n    fun default() {\n        launchActivity<ComposableTestActivity>().use { scenario ->\n            rule\n                .withScenario(scenario)\n                .setCompose {\n                    Text(text = "Hello, Testify!")\n                }\n                .assertSame()\n        }\n    }\n}\n')),(0,a.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"The helper extension method ",(0,a.kt)("inlineCode",{parentName:"p"},"launchComposableTestActivity")," is provided to simplify the launching of the provided ",(0,a.kt)("inlineCode",{parentName:"p"},"ComposableTestActivity")," test harness activity."))),(0,a.kt)("h2",{id:"composablescreenshotrule"},"ComposableScreenshotRule"),(0,a.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},(0,a.kt)("a",{parentName:"p",href:"https://developer.android.com/reference/androidx/test/rule/ActivityTestRule"},"ActivityTestRule is deprecated")),(0,a.kt)("p",{parentName:"div"},"Use ",(0,a.kt)("strong",{parentName:"p"},"androidx.test.core.app.ActivityScenario")," instead with ",(0,a.kt)("a",{parentName:"p",href:"#screenshotscenariorule"},(0,a.kt)("strong",{parentName:"a"},"ComposableScreenshotScenarioRule")),"."))),(0,a.kt)("h3",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'class ComposableScreenshotTest {\n\n    @get:Rule val rule = ComposableScreenshotRule()\n\n    @ScreenshotInstrumentation\n    @Test\n    fun default() {\n        rule\n            .setCompose {\n                Text(text = "Hello, Testify!")\n            }\n            .assertSame()\n    }\n}\n')))}d.isMDXComponent=!0}}]);
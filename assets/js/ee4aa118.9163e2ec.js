"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3929],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>f});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),s=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},l="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),l=s(r),m=a,f=l["".concat(c,".").concat(m)]||l[m]||d[m]||i;return r?n.createElement(f,o(o({ref:t},u),{},{components:r})):n.createElement(f,o({ref:t},u))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=m;var p={};for(var c in t)hasOwnProperty.call(t,c)&&(p[c]=t[c]);p.originalType=e,p[l]="string"==typeof e?e:a,o[1]=p;for(var s=2;s<i;s++)o[s]=r[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},1595:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>l,frontMatter:()=>i,metadata:()=>p,toc:()=>s});var n=r(7462),a=(r(7294),r(3905));const i={},o="Customizing the captured bitmap",p={unversionedId:"recipes/custom-bitmap",id:"version-2.0.0-alpha01/recipes/custom-bitmap",title:"Customizing the captured bitmap",description:"Testify provides the setCaptureMethod() on ScreenshotRule which can be used to override the default mechanism for creating a bitmap",source:"@site/versioned_docs/version-2.0.0-alpha01/recipes/16-custom-bitmap.md",sourceDirName:"recipes",slug:"/recipes/custom-bitmap",permalink:"/android-testify/docs/2.0.0-alpha01/recipes/custom-bitmap",draft:!1,editUrl:"https://github.com/ndtp/android-testify/tree/issue-12/docusaurus/docs/versioned_docs/version-2.0.0-alpha01/recipes/16-custom-bitmap.md",tags:[],version:"2.0.0-alpha01",sidebarPosition:16,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Placing the keyboard focus on a specific view",permalink:"/android-testify/docs/2.0.0-alpha01/recipes/keyboard-focus"},next:{title:"Providing a custom comparison method",permalink:"/android-testify/docs/2.0.0-alpha01/recipes/custom-capture"}},c={},s=[],u={toc:s};function l(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"customizing-the-captured-bitmap"},"Customizing the captured bitmap"),(0,a.kt)("p",null,"Testify provides the ",(0,a.kt)("inlineCode",{parentName:"p"},"setCaptureMethod()")," on ",(0,a.kt)("inlineCode",{parentName:"p"},"ScreenshotRule")," which can be used to override the default mechanism for creating a bitmap\nfrom the Activity under test. You can use ",(0,a.kt)("inlineCode",{parentName:"p"},"setCaptureMethod()")," to provide your own implementation of ",(0,a.kt)("inlineCode",{parentName:"p"},"CaptureMethod"),". The only requirement\nfor ",(0,a.kt)("inlineCode",{parentName:"p"},"CaptureMethod")," is that you return an ",(0,a.kt)("inlineCode",{parentName:"p"},"android.graphics.Bitmap")," instance. You can use any method you want to create a bitmap. You can\nalso use the provided ",(0,a.kt)("inlineCode",{parentName:"p"},"ScreenshotUtility")," to capture a bitmap and then modify it to your liking."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'@ScreenshotInstrumentation\n@Test\nfun captureMethodExample() {\n    rule\n        .setCaptureMethod { activity, targetView ->\n            /* Return a Bitmap */\n            ScreenshotUtility().createBitmapFromView(activity, targetView).apply {\n                /* Wrap the Bitmap in a Canvas so we can draw on it */\n                Canvas(this).apply {\n                    /* Add a wordmark to the captured image */\n                    val textPaint = Paint().apply {\n                        color = Color.BLACK\n                        textSize = 50f\n                        isAntiAlias = true\n                    }\n                    this.drawText("<<Testify ${rule.testMethodName}>>", 50f, 2000f, textPaint)\n                }\n            }\n        }\n        .assertSame()\n}\n')))}l.isMDXComponent=!0}}]);
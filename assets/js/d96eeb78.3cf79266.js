"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6734],{3905:(e,t,o)=>{o.d(t,{Zo:()=>c,kt:()=>f});var n=o(7294);function r(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function s(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function a(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?s(Object(o),!0).forEach((function(t){r(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):s(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function i(e,t){if(null==e)return{};var o,n,r=function(e,t){if(null==e)return{};var o,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)o=s[n],t.indexOf(o)>=0||(r[o]=e[o]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)o=s[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var p=n.createContext({}),l=function(e){var t=n.useContext(p),o=t;return e&&(o="function"==typeof e?e(t):a(a({},t),e)),o},c=function(e){var t=l(e.components);return n.createElement(p.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var o=e.components,r=e.mdxType,s=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=l(o),d=r,f=u["".concat(p,".").concat(d)]||u[d]||m[d]||s;return o?n.createElement(f,a(a({ref:t},c),{},{components:o})):n.createElement(f,a({ref:t},c))}));function f(e,t){var o=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=o.length,a=new Array(s);a[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[u]="string"==typeof e?e:r,a[1]=i;for(var l=2;l<s;l++)a[l]=o[l];return n.createElement.apply(null,a)}return n.createElement.apply(null,o)}d.displayName="MDXCreateElement"},5882:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var n=o(7462),r=(o(7294),o(3905));const s={},a="Interoperability with ComposeTestRule",i={unversionedId:"extensions/compose/compose-test-rule",id:"version-2.0.0-beta03/extensions/compose/compose-test-rule",title:"Interoperability with ComposeTestRule",description:"A ComposeTestRule is a TestRule that allows you to test and control composables and applications using Compose. You can read more about Testing your Compose layout here.",source:"@site/versioned_docs/version-2.0.0-beta03/extensions/compose/3-compose-test-rule.md",sourceDirName:"extensions/compose",slug:"/extensions/compose/compose-test-rule",permalink:"/android-testify/docs/2.0.0-beta03/extensions/compose/compose-test-rule",draft:!1,editUrl:"https://github.com/ndtp/android-testify/tree/issue-12/docusaurus/docs/versioned_docs/version-2.0.0-beta03/extensions/compose/3-compose-test-rule.md",tags:[],version:"2.0.0-beta03",sidebarPosition:3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Test a Composable",permalink:"/android-testify/docs/2.0.0-beta03/extensions/compose/test"},next:{title:"Testing with different Locales and Font Scales",permalink:"/android-testify/docs/2.0.0-beta03/extensions/compose/resource-wrapping"}},p={},l=[{value:"Example",id:"example",level:3}],c={toc:l};function u(e){let{components:t,...o}=e;return(0,r.kt)("wrapper",(0,n.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"interoperability-with-composetestrule"},"Interoperability with ComposeTestRule"),(0,r.kt)("p",null,"A ",(0,r.kt)("a",{parentName:"p",href:"https://developer.android.com/reference/kotlin/androidx/compose/ui/test/junit4/ComposeTestRule"},"ComposeTestRule")," is a ",(0,r.kt)("a",{parentName:"p",href:"https://junit.org/junit4/javadoc/4.12/org/junit/rules/TestRule.html"},"TestRule")," that allows you to test and control composables and applications using Compose. You can read more about ",(0,r.kt)("a",{parentName:"p",href:"https://developer.android.com/jetpack/compose/testing"},"Testing your Compose layout here"),"."),(0,r.kt)("p",null,"The Testify Compose extension provides a default ",(0,r.kt)("inlineCode",{parentName:"p"},"ComposeRule"),", or you can specify your own."),(0,r.kt)("p",null,"To specify your own ",(0,r.kt)("inlineCode",{parentName:"p"},"ComposeRule")," instance, pass the instance to the ",(0,r.kt)("inlineCode",{parentName:"p"},"composeTestRule")," argument on the ",(0,r.kt)("inlineCode",{parentName:"p"},"ComposableScreenshotRule")," constructor."),(0,r.kt)("p",null,"You have access to the ",(0,r.kt)("inlineCode",{parentName:"p"},"ComposeRule")," instance through the ",(0,r.kt)("inlineCode",{parentName:"p"},"setComposeActions()")," method. The ",(0,r.kt)("inlineCode",{parentName:"p"},"ComposeRule")," is provided as the first argument, ",(0,r.kt)("inlineCode",{parentName:"p"},"composeTestRule"),"."),(0,r.kt)("h3",{id:"example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'class ComposableScreenshotTest {\n    @get:Rule\n    val rule = ComposableScreenshotRule(composeTestRule = createAndroidComposeRule(ComposableTestActivity::class.java))\n\n    @ScreenshotInstrumentation\n    @Test\n    fun default() {\n      rule\n          .setCompose {\n              var text by remember { mutableStateOf("") }\n              TextField(\n                  value = text,\n                  onValueChange = { text = it },\n                  modifier = Modifier.testTag("field")\n              )\n          }\n          .setComposeActions { composeTestRule ->\n              composeTestRule.onNodeWithTag("field").performTextInput("testify")\n          }\n          .assertSame()\n    }\n}\n')))}u.isMDXComponent=!0}}]);
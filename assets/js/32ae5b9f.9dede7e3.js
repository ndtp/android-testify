"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1503],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=s(n),m=a,f=d["".concat(p,".").concat(m)]||d[m]||l[m]||i;return n?r.createElement(f,o(o({ref:t},u),{},{components:n})):r.createElement(f,o({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},233:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return p},default:function(){return m},frontMatter:function(){return c},metadata:function(){return s},toc:function(){return l}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],c={},p="Customizing the captured bitmap",s={unversionedId:"recipes/custom-bitmap",id:"version-1.2.0-alpha01/recipes/custom-bitmap",title:"Customizing the captured bitmap",description:"Testify provides the setCaptureMethod() on ScreenshotRule which can be used to override the default mechanism for creating a bitmap",source:"@site/versioned_docs/version-1.2.0-alpha01/recipes/16-custom-bitmap.md",sourceDirName:"recipes",slug:"/recipes/custom-bitmap",permalink:"/android-testify/docs/1.2.0-alpha01/recipes/custom-bitmap",draft:!1,editUrl:"https://github.com/ndtp/android-testify/tree/issue-12/docusaurus/docs/versioned_docs/version-1.2.0-alpha01/recipes/16-custom-bitmap.md",tags:[],version:"1.2.0-alpha01",sidebarPosition:16,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Placing the keyboard focus on a specific view",permalink:"/android-testify/docs/1.2.0-alpha01/recipes/keyboard-focus"},next:{title:"Providing a custom comparison method",permalink:"/android-testify/docs/1.2.0-alpha01/recipes/custom-capture"}},u={},l=[],d={toc:l};function m(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"customizing-the-captured-bitmap"},"Customizing the captured bitmap"),(0,i.kt)("p",null,"Testify provides the ",(0,i.kt)("inlineCode",{parentName:"p"},"setCaptureMethod()")," on ",(0,i.kt)("inlineCode",{parentName:"p"},"ScreenshotRule")," which can be used to override the default mechanism for creating a bitmap\nfrom the Activity under test. You can use ",(0,i.kt)("inlineCode",{parentName:"p"},"setCaptureMethod()")," to provide your own implementation of ",(0,i.kt)("inlineCode",{parentName:"p"},"CaptureMethod"),". The only requirement\nfor ",(0,i.kt)("inlineCode",{parentName:"p"},"CaptureMethod")," is that you return an ",(0,i.kt)("inlineCode",{parentName:"p"},"android.graphics.Bitmap")," instance. You can use any method you want to create a bitmap. You can\nalso use the provided ",(0,i.kt)("inlineCode",{parentName:"p"},"ScreenshotUtility")," to capture a bitmap and then modify it to your liking."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'@ScreenshotInstrumentation\n@Test\nfun captureMethodExample() {\n    rule\n        .setCaptureMethod { activity, targetView ->\n            /* Return a Bitmap */\n            ScreenshotUtility().createBitmapFromView(activity, targetView).apply {\n                /* Wrap the Bitmap in a Canvas so we can draw on it */\n                Canvas(this).apply {\n                    /* Add a wordmark to the captured image */\n                    val textPaint = Paint().apply {\n                        color = Color.BLACK\n                        textSize = 50f\n                        isAntiAlias = true\n                    }\n                    this.drawText("<<Testify ${rule.testMethodName}>>", 50f, 2000f, textPaint)\n                }\n            }\n        }\n        .assertSame()\n}\n')))}m.isMDXComponent=!0}}]);
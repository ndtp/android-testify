"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2315],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=l(n),d=i,m=p["".concat(c,".").concat(d)]||p[d]||f[d]||a;return n?r.createElement(m,o(o({ref:t},u),{},{components:n})):r.createElement(m,o({ref:t},u))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[p]="string"==typeof e?e:i,o[1]=s;for(var l=2;l<a;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7485:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>f,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=n(7462),i=(n(7294),n(3905));const a={},o="Writing a test in Java",s={unversionedId:"recipes/java",id:"recipes/java",title:"Writing a test in Java",description:"Testify is fully backwards compatible with Java.",source:"@site/docs/recipes/9-java.md",sourceDirName:"recipes",slug:"/recipes/java",permalink:"/android-testify/docs/recipes/java",draft:!1,editUrl:"https://github.com/ndtp/android-testify/tree/issue-12/docusaurus/docs/docs/recipes/9-java.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Use Espresso UI tests with Testify",permalink:"/android-testify/docs/recipes/espresso"},next:{title:"Changing the orientation of the screen",permalink:"/android-testify/docs/recipes/orientation"}},c={},l=[],u={toc:l},p="wrapper";function f(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"writing-a-test-in-java"},"Writing a test in Java"),(0,i.kt)("p",null,"Testify is fully backwards compatible with Java."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"import org.junit.Rule;\nimport org.junit.Test;\n\nimport dev.testify.ScreenshotRule;\nimport dev.testify.annotation.ScreenshotInstrumentation;\n\npublic class MainActivityScreenshotTest {\n\n    @Rule\n    public ScreenshotRule<MainActivity> rule = new ScreenshotRule<>(MainActivity.class);\n\n    @ScreenshotInstrumentation\n    @Test\n    public void testDefault() {\n        rule.assertSame();\n    }\n}\n")),(0,i.kt)("p",null,"The function ",(0,i.kt)("inlineCode",{parentName:"p"},"Configurable.makeConfigurable()")," is provided as a convenience to more easily configure Testify from Java."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"import org.junit.Rule;\nimport org.junit.Test;\n\nimport dev.testify.ScreenshotRule;\nimport dev.testify.annotation.ScreenshotInstrumentation;\n\npublic class MainActivityScreenshotTest {\n\n    @Rule\n    public ScreenshotRule<MainActivity> rule = new ScreenshotRule<>(MainActivity.class);\n\n    @ScreenshotInstrumentation\n    @Test\n    public void testConfiguration() {\n        Configurable.makeConfigurable(rule)\n            .setExactness(0.95f)\n            .setCaptureMethod(PixelCopyCaptureKt::pixelCopyCapture)\n            .assertSame();\n    }\n}\n")))}f.isMDXComponent=!0}}]);
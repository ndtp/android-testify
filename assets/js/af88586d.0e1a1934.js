"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3816],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var s=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,s,i=function(e,t){if(null==e)return{};var n,s,i={},l=Object.keys(e);for(s=0;s<l.length;s++)n=l[s],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(s=0;s<l.length;s++)n=l[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var a=s.createContext({}),d=function(e){var t=s.useContext(a),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=d(e.components);return s.createElement(a.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},m=s.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,a=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),u=d(n),m=i,h=u["".concat(a,".").concat(m)]||u[m]||p[m]||l;return n?s.createElement(h,o(o({ref:t},c),{},{components:n})):s.createElement(h,o({ref:t},c))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,o=new Array(l);o[0]=m;var r={};for(var a in t)hasOwnProperty.call(t,a)&&(r[a]=t[a]);r.originalType=e,r[u]="string"==typeof e?e:i,o[1]=r;for(var d=2;d<l;d++)o[d]=n[d];return s.createElement.apply(null,o)}return s.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6247:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>o,default:()=>p,frontMatter:()=>l,metadata:()=>r,toc:()=>d});var s=n(7462),i=(n(7294),n(3905));const l={},o="Use the Gradle Plugin tasks",r={unversionedId:"get-started/use-gradle-plugin",id:"get-started/use-gradle-plugin",title:"Use the Gradle Plugin tasks",description:"The Testify Android Gradle Plugin offers a suite of tasks to conveniently integrate Testify into the normal Android development workflow. It integrates seamlessly with existing test suites, providing tools for running, recording, and managing screenshot tests. The plugin enhances testing efficiency by simplifying device and emulator configurations and supports Android Studio integration for a streamlined workflow. For more details and specific instructions, please refer to the Recipe Book.",source:"@site/docs/get-started/8-use-gradle-plugin.md",sourceDirName:"get-started",slug:"/get-started/use-gradle-plugin",permalink:"/android-testify/docs/get-started/use-gradle-plugin",draft:!1,editUrl:"https://github.com/ndtp/android-testify/tree/issue-12/docusaurus/docs/docs/get-started/8-use-gradle-plugin.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Install and use the Android Studio Plugin",permalink:"/android-testify/docs/get-started/set-up-intellij-plugin"},next:{title:"Extensions",permalink:"/android-testify/docs/category/extensions"}},a={},d=[{value:"Configuration",id:"configuration",level:2},{value:"Gradle extension",id:"gradle-extension",level:3},{value:"Command-line properties",id:"command-line-properties",level:3},{value:"Core Tasks",id:"core-tasks",level:2},{value:"screenshotTest",id:"screenshottest",level:3},{value:"screenshotRecord",id:"screenshotrecord",level:3},{value:"screenshotPull",id:"screenshotpull",level:3},{value:"screenshotClear",id:"screenshotclear",level:3},{value:"Report Tasks",id:"report-tasks",level:2},{value:"reportPull",id:"reportpull",level:3},{value:"reportShow",id:"reportshow",level:3},{value:"Utility Tasks",id:"utility-tasks",level:2},{value:"deviceLocale",id:"devicelocale",level:3},{value:"deviceTimeZone",id:"devicetimezone",level:3},{value:"disableSoftKeyboard",id:"disablesoftkeyboard",level:3},{value:"hidePasswords",id:"hidepasswords",level:3},{value:"testifyDevices",id:"testifydevices",level:3},{value:"testifyKey",id:"testifykey",level:3},{value:"testifySettings",id:"testifysettings",level:3},{value:"testifyVersion",id:"testifyversion",level:3}],c={toc:d},u="wrapper";function p(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,s.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"use-the-gradle-plugin-tasks"},"Use the Gradle Plugin tasks"),(0,i.kt)("p",null,"The Testify Android Gradle Plugin offers a suite of tasks to conveniently integrate Testify into the normal Android development workflow. It integrates seamlessly with existing test suites, providing tools for running, recording, and managing screenshot tests. The plugin enhances testing efficiency by simplifying device and emulator configurations and supports Android Studio integration for a streamlined workflow. For more details and specific instructions, please refer to the ",(0,i.kt)("a",{parentName:"p",href:"../category/recipes"},"Recipe Book"),"."),(0,i.kt)("h2",{id:"configuration"},"Configuration"),(0,i.kt)("p",null,"Applying the Testify Gradle Plugin to your projects automatically configures and includes the Testify Screenshot Library as an ",(0,i.kt)("inlineCode",{parentName:"p"},"androidTest")," dependency on your project. The Testify Library and the Gradle Plugin are both configurable via the ",(0,i.kt)("inlineCode",{parentName:"p"},"testify {}")," closure in your ",(0,i.kt)("inlineCode",{parentName:"p"},"build.gradle")," file."),(0,i.kt)("h3",{id:"gradle-extension"},"Gradle extension"),(0,i.kt)("p",null,"Testify supports the following configuration options:"),(0,i.kt)("dl",null,(0,i.kt)("dt",null,(0,i.kt)("b",null,(0,i.kt)("code",null,"autoImplementLibrary"))),(0,i.kt)("dd",null,"Automatically add the ",(0,i.kt)("code",null,"dev.testify:testify")," dependency to your ",(0,i.kt)("code",null,"androidTest")," configuration. Defaults to ",(0,i.kt)("code",null,"true")),(0,i.kt)("dt",null,(0,i.kt)("b",null,(0,i.kt)("code",null,"baselineSourceDir"))),(0,i.kt)("dd",null,"The directory on the client host machine that contain the original baseline images under version control. This value defaults to the ",(0,i.kt)("code",null,"src/androidTest/assets")," directory."),(0,i.kt)("dt",null,(0,i.kt)("b",null,(0,i.kt)("code",null,"installAndroidTestTask"))),(0,i.kt)("dd",null,"The Gradle task used to install the Android Test APK. In most cases, this value is automatically inferred from the project configuration and is typically ",(0,i.kt)("code",null,"installDebugAndroidTest"),"."),(0,i.kt)("dt",null,(0,i.kt)("b",null,(0,i.kt)("code",null,"installTask"))),(0,i.kt)("dd",null,"The Gradle task used to install the Application Under Test APK. In most cases, this value is automatically inferred from the project configuration and is typically ",(0,i.kt)("code",null,"installDebug"),"."),(0,i.kt)("dt",null,(0,i.kt)("b",null,(0,i.kt)("code",null,"isRecordMode"))),(0,i.kt)("dd",null,"Indicates that screenshotTest/screenshotRecord should never fail and always record new baseline images. Default is ",(0,i.kt)("code",null,"false"),"."),(0,i.kt)("dt",null,(0,i.kt)("b",null,(0,i.kt)("code",null,"moduleName"))),(0,i.kt)("dd",null,"The name of the module under test. This value is inferred automatically and should not normally be modified by the user."),(0,i.kt)("dt",null,(0,i.kt)("b",null,(0,i.kt)("code",null,"pullWaitTime"))),(0,i.kt)("dd",null,"The length of time to sleep in milliseconds after pulling files from the device. Used to allow time for the local file system to complete write operations. Defaults to 0."),(0,i.kt)("dt",null,(0,i.kt)("b",null,(0,i.kt)("code",null,"rootDestinationDirectory"))),(0,i.kt)("dd",null,"The root directory containing the screenshots on the test device. Used when pulling files from the device. This value is automatically set."),(0,i.kt)("dt",null,(0,i.kt)("b",null,(0,i.kt)("code",null,"screenshotAnnotation"))),(0,i.kt)("dd",null,"The annotation used by ScreenshotTestTask as an argument to ",(0,i.kt)("code",null,"adb shell am instrument")," to filter tests being run. See ",(0,i.kt)("a",{href:"https://developer.android.com/studio/test/command-line#run-tests-with-adb"},"https://developer.android.com/studio/test/command-line#run-tests-with-adb"),". Defaults to ",(0,i.kt)("code",null,"dev.testify.annotation.ScreenshotInstrumentation")),(0,i.kt)("dt",null,(0,i.kt)("b",null,(0,i.kt)("code",null,"targetPackageId"))),(0,i.kt)("dd",null,"The package ID for the APK under test. For a typical application, testify requires two APKs: the target apk under test, and a test apk containing your tests. e.g. ",(0,i.kt)("code",null,"com.testify.example")),(0,i.kt)("dt",null,(0,i.kt)("b",null,(0,i.kt)("code",null,"testPackageId"))),(0,i.kt)("dd",null,"The package ID for the test APK. For a typical application, testify requires two APKs: the target apk under test, and a test apk containing your tests. e.g. ",(0,i.kt)("code",null,"com.testify.example.test")),(0,i.kt)("dt",null,(0,i.kt)("b",null,(0,i.kt)("code",null,"testRunner"))),(0,i.kt)("dd",null,"The AndroidJUnitRunner to use when running your instrumented tests. In most cases, this is inferred from your project configuration automatically and is typically ",(0,i.kt)("code",null,"androidx.test.runner.AndroidJUnitRunner"),". See ",(0,i.kt)("a",{href:"https://developer.android.com/training/testing/instrumented-tests#set-testing"},"https://developer.android.com/training/testing/instrumented-tests#set-testing")),(0,i.kt)("dt",null,(0,i.kt)("b",null,(0,i.kt)("code",null,"useSdCard"))),(0,i.kt)("dd",null,"Instructs Testify to write screenshots to the SDCARD directory. See ",(0,i.kt)("a",{href:"https://ndtp.github.io/android-testify/docs/recipes/sdcard#configuring-the-gradle-plugin-to-write-to-the-sdcard"},"https://ndtp.github.io/android-testify/docs/recipes/sdcard#configuring-the-gradle-plugin-to-write-to-the-sdcard"),". Defaults to false."),(0,i.kt)("dt",null,(0,i.kt)("b",null,(0,i.kt)("code",null,"useTestStorage"))),(0,i.kt)("dd",null,"Instructs Testify to save screenshots to the Test Storage. See ",(0,i.kt)("a",{href:"https://developer.android.com/reference/androidx/test/services/storage/TestStorage"},"https://developer.android.com/reference/androidx/test/services/storage/TestStorage"),". Defaults to false.")),(0,i.kt)("h3",{id:"command-line-properties"},"Command-line properties"),(0,i.kt)("p",null,"Gradle project properties can be used to set values on the Testify Gradle Plugin from the command-line.\nThey can be set from the command line using the ",(0,i.kt)("inlineCode",{parentName:"p"},"-P")," / ",(0,i.kt)("inlineCode",{parentName:"p"},"--project-prop")," environment option."),(0,i.kt)("p",null,"See ",(0,i.kt)("a",{parentName:"p",href:"https://docs.gradle.org/current/userguide/project_properties.html"},"https://docs.gradle.org/current/userguide/project_properties.html")),(0,i.kt)("dl",null,(0,i.kt)("dt",null,(0,i.kt)("b",null,(0,i.kt)("code",null,"device"))),(0,i.kt)("dd",null,"Index of the Testify Device to target for the command. Use ",(0,i.kt)("code",null,"./gradlew testifyDevices")," to see a list of eligible devices."),(0,i.kt)("dt",null,(0,i.kt)("b",null,(0,i.kt)("code",null,"reportFileName"))),(0,i.kt)("dd",null,"Override the default file name used locally when copying the file."),(0,i.kt)("dt",null,(0,i.kt)("b",null,(0,i.kt)("code",null,"reportPath"))),(0,i.kt)("dd",null,"Override the default path to copy the report file to."),(0,i.kt)("dt",null,(0,i.kt)("b",null,(0,i.kt)("code",null,"shardCount, shardIndex"))),(0,i.kt)("dd",null,"If you need to parallelize the execution of your tests, sharing them across multiple devices to make them run faster, you can split them into groups, or shards. The test runner supports splitting a single test suite into multiple shards, so you can easily run tests belonging to the same shard together as a group. Each shard is identified by an index number. When running tests, use the ",(0,i.kt)("code",null,"-PshardCount")," option to specify the number of separate shards to create and the ",(0,i.kt)("code",null,"-PshardIndex")," option to specify which shard to run.",(0,i.kt)("dl",null,(0,i.kt)("dt",null,(0,i.kt)("b",null,(0,i.kt)("code",null,"shardCount"))),(0,i.kt)("dd",null,"Specifies the total number of shards into which the test suite is divided"),(0,i.kt)("dt",null,(0,i.kt)("b",null,(0,i.kt)("code",null,"shardIndex"))),(0,i.kt)("dd",null,"Identifies the specific shard to be executed, with an index ranging from 0 to `shardCount` - 1."))),(0,i.kt)("dt",null,(0,i.kt)("b",null,(0,i.kt)("code",null,"testClass"))),(0,i.kt)("dd",null,"Run all tests in the specified class. Class name should be fully qualified.",(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell-session"},"\n./gradlew FlixSample:screenshotTest -PtestClass=dev.testify.samples.flix.ui.common.composables.CreditStripScreenshotTest\n\n"))),(0,i.kt)("dt",null,(0,i.kt)("b",null,(0,i.kt)("code",null,"testName"))),(0,i.kt)("dd",null,"Run the specific test case. Must be used in conjunction with ",(0,i.kt)("code",null,"testClass"),".",(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell-session"},"\n./gradlew FlixSample:screenshotTest -PtestName=longCreditStrip -PtestClass=dev.testify.samples.flix.ui.common.composables.CreditStripScreenshotTest\n\n"))),(0,i.kt)("dt",null,(0,i.kt)("b",null,(0,i.kt)("code",null,"user"))),(0,i.kt)("dd",null,"Specify the user ID for multi-user testing. See ",(0,i.kt)("a",{href:"https://source.android.com/docs/devices/admin/multi-user-testing"},"https://source.android.com/docs/devices/admin/multi-user-testing")),(0,i.kt)("dt",null,(0,i.kt)("b",null,(0,i.kt)("code",null,"verbose"))),(0,i.kt)("dd",null,"Print verbose console output. Useful for debugging purposes.")),(0,i.kt)("h2",{id:"core-tasks"},"Core Tasks"),(0,i.kt)("h3",{id:"screenshottest"},"screenshotTest"),(0,i.kt)("p",null,"Run all the screenshot tests in your app and fail if any differences from the baseline are detected."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell-session"},"$ ./gradlew FlixSample:screenshotTest\n\n\n> Task :FlixSample:deviceLocale\n\n------------------------------------------------------------\nDisplays the device locale.\n------------------------------------------------------------\n\n  Current Locale       = en_US\n\n> Task :FlixSample:deviceTimeZone\n\n------------------------------------------------------------\nDisplays the time zone currently set on the device\n------------------------------------------------------------\n\n  Time zone            = Atlantic/Reykjavik\n\n> Task :FlixSample:disableSoftKeyboard\n\n------------------------------------------------------------\nDisables the soft keyboard on the device\n------------------------------------------------------------\n\n  Success\n\n> Task :FlixSample:hidePasswords\n\n------------------------------------------------------------\nHides passwords fully on the device\n------------------------------------------------------------\n\n  Success\n\n> Task :FlixSample:installDebug\nInstalling APK 'FlixSample-debug.apk' on 'Testify_Open_Source_Emulator(AVD) - 10' for :FlixSample:debug\nInstalled on 1 device.\n\n> Task :FlixSample:installDebugAndroidTest\nInstalling APK 'FlixSample-debug-androidTest.apk' on 'Testify_Open_Source_Emulator(AVD) - 10' for :FlixSample:debug-androidTest\nInstalled on 1 device.\n\n> Task :FlixSample:screenshotTest\n\n------------------------------------------------------------\nRun the Testify screenshot tests\n------------------------------------------------------------\n\n\ndev.testify.samples.flix.ComposableScreenshotTest:.\ndev.testify.samples.flix.ui.common.composables.CastMemberScreenshotTest:.\ndev.testify.samples.flix.ui.common.composables.CreditStripScreenshotTest:...\ndev.testify.samples.flix.ui.common.composables.GenreStripScreenshotTest:..\ndev.testify.samples.flix.ui.common.composables.MetaDataScreenshotTest:....\ndev.testify.samples.flix.ui.common.composables.MoviePosterScreenshotTest:..\ndev.testify.samples.flix.ui.common.composables.OverviewTextScreenshotTest:..\ndev.testify.samples.flix.ui.common.composables.PrimaryTitleScreenshotTest:..\ndev.testify.samples.flix.ui.common.composables.SecondaryTitleScreenshotTest:..\ndev.testify.samples.flix.ui.moviedetails.MovieDetailsScreenshotTest:.\n\nTime: 8.978\n\nOK (20 tests)\n\n\n\nDeprecated Gradle features were used in this build, making it incompatible with Gradle 8.0.\n\nYou can use '--warning-mode all' to show the individual deprecation warnings and determine if they come from your own scripts or plugins.\n\nSee https://docs.gradle.org/7.5/userguide/command_line_interface.html#sec:command_line_warnings\n\nBUILD SUCCESSFUL in 13s\n177 actionable tasks: 7 executed, 170 up-to-date\n")),(0,i.kt)("h3",{id:"screenshotrecord"},"screenshotRecord"),(0,i.kt)("p",null,"Run all the screenshot tests in your app and update the local baseline."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell-session"},"$ ./gradlew FlixSample:screenshotRecord\n\n> Task :FlixSample:deviceLocale\n\n------------------------------------------------------------\nDisplays the device locale.\n------------------------------------------------------------\n\n  Current Locale       = en_US\n\n> Task :FlixSample:deviceTimeZone\n\n------------------------------------------------------------\nDisplays the time zone currently set on the device\n------------------------------------------------------------\n\n  Time zone            = Atlantic/Reykjavik\n\n> Task :FlixSample:disableSoftKeyboard\n\n------------------------------------------------------------\nDisables the soft keyboard on the device\n------------------------------------------------------------\n\n  Success\n\n> Task :FlixSample:hidePasswords\n\n------------------------------------------------------------\nHides passwords fully on the device\n------------------------------------------------------------\n\n  Success\n\n> Task :FlixSample:installDebug\nInstalling APK 'FlixSample-debug.apk' on 'Testify_Open_Source_Emulator(AVD) - 10' for :FlixSample:debug\nInstalled on 1 device.\n\n> Task :FlixSample:installDebugAndroidTest\nInstalling APK 'FlixSample-debug-androidTest.apk' on 'Testify_Open_Source_Emulator(AVD) - 10' for :FlixSample:debug-androidTest\nInstalled on 1 device.\n\n> Task :FlixSample:screenshotClear\n\n------------------------------------------------------------\nRemove any existing screenshot test images from the device\n------------------------------------------------------------\n\n  No failed screenshots found\n\n> Task :FlixSample:screenshotTestRecord\n\n------------------------------------------------------------\n\n------------------------------------------------------------\n\n\ndev.testify.samples.flix.ComposableScreenshotTest:\n\n        \u2713 Recording baseline for ComposableScreenshotTest_default.\n\ndev.testify.samples.flix.ui.common.composables.CastMemberScreenshotTest:\n\n        \u2713 Recording baseline for CastMemberScreenshotTest_default.\n\ndev.testify.samples.flix.ui.common.composables.CreditStripScreenshotTest:\n\n        \u2713 Recording baseline for CreditStripScreenshotTest_longCreditStrip.\n        \u2713 Recording baseline for CreditStripScreenshotTest_emptyCreditStrip.\n        \u2713 Recording baseline for CreditStripScreenshotTest_default.\n\ndev.testify.samples.flix.ui.common.composables.GenreStripScreenshotTest:\n\n        \u2713 Recording baseline for GenreStripScreenshotTest_lotsOfGenres.\n        \u2713 Recording baseline for GenreStripScreenshotTest_default.\n\ndev.testify.samples.flix.ui.common.composables.MetaDataScreenshotTest:\n\n        \u2713 Recording baseline for MetaDataScreenshotTest_onlyCertification.\n        \u2713 Recording baseline for MetaDataScreenshotTest_onlyReleaseDate.\n        \u2713 Recording baseline for MetaDataScreenshotTest_onlyRuntime.\n        \u2713 Recording baseline for MetaDataScreenshotTest_default.\n\ndev.testify.samples.flix.ui.common.composables.MoviePosterScreenshotTest:\n\n        \u2713 Recording baseline for MoviePosterScreenshotTest_default.\n        \u2713 Recording baseline for MoviePosterScreenshotTest_nullPosterUrlImpliesLoading.\n\ndev.testify.samples.flix.ui.common.composables.OverviewTextScreenshotTest:\n\n        \u2713 Recording baseline for OverviewTextScreenshotTest_longText.\n        \u2713 Recording baseline for OverviewTextScreenshotTest_default.\n\ndev.testify.samples.flix.ui.common.composables.PrimaryTitleScreenshotTest:\n\n        \u2713 Recording baseline for PrimaryTitleScreenshotTest_longText.\n        \u2713 Recording baseline for PrimaryTitleScreenshotTest_default.\n\ndev.testify.samples.flix.ui.common.composables.SecondaryTitleScreenshotTest:\n\n        \u2713 Recording baseline for SecondaryTitleScreenshotTest_longText.\n        \u2713 Recording baseline for SecondaryTitleScreenshotTest_default.\n\ndev.testify.samples.flix.ui.moviedetails.MovieDetailsScreenshotTest:\n\n        \u2713 Recording baseline for MovieDetailsScreenshotTest_default.\n\nTime: 7.65\n\nOK (20 tests)\n\n> Task :FlixSample:screenshotPull\n\n------------------------------------------------------------\nPull screenshots from the device and wait for all files to be committed to disk\n------------------------------------------------------------\n\n  Pulling screenshots:\n\n  Source               = ./app_images/screenshots\n  Destination          = /Users/admin/android-testify/Samples/Flix/src/androidTest/assets/\n\n  20 images to be pulled\n    Copying CastMemberScreenshotTest_default...\n    Copying ComposableScreenshotTest_default...\n    Copying CreditStripScreenshotTest_default...\n    Copying CreditStripScreenshotTest_emptyCreditStrip...\n    Copying CreditStripScreenshotTest_longCreditStrip...\n    Copying GenreStripScreenshotTest_default...\n    Copying GenreStripScreenshotTest_lotsOfGenres...\n    Copying MetaDataScreenshotTest_default...\n    Copying MetaDataScreenshotTest_onlyCertification...\n    Copying MetaDataScreenshotTest_onlyReleaseDate...\n    Copying MetaDataScreenshotTest_onlyRuntime...\n    Copying MovieDetailsScreenshotTest_default...\n    Copying MoviePosterScreenshotTest_default...\n    Copying MoviePosterScreenshotTest_nullPosterUrlImpliesLoading...\n    Copying OverviewTextScreenshotTest_default...\n    Copying OverviewTextScreenshotTest_longText...\n    Copying PrimaryTitleScreenshotTest_default...\n    Copying PrimaryTitleScreenshotTest_longText...\n    Copying SecondaryTitleScreenshotTest_default...\n    Copying SecondaryTitleScreenshotTest_longText...\n\n  Ready\n\n> Task :FlixSample:screenshotRecord\n\n------------------------------------------------------------\nRun the screenshot tests and record a new baseline\n------------------------------------------------------------\n\n\nDeprecated Gradle features were used in this build, making it incompatible with Gradle 8.0.\n\nYou can use '--warning-mode all' to show the individual deprecation warnings and determine if they come from your own scripts or plugins.\n\nSee https://docs.gradle.org/7.5/userguide/command_line_interface.html#sec:command_line_warnings\n\nBUILD SUCCESSFUL in 20s\n180 actionable tasks: 13 executed, 167 up-to-date\n")),(0,i.kt)("h3",{id:"screenshotpull"},"screenshotPull"),(0,i.kt)("p",null,"Copy images from the remote directory on your emulator to your local ",(0,i.kt)("inlineCode",{parentName:"p"},"androidTest/assets")," directory."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell-session"},"$ ./gradlew FlixSample:screenshotPull\n\n\n> Task :FlixSample:screenshotPull\n\n------------------------------------------------------------\nPull screenshots from the device and wait for all files to be committed to disk\n------------------------------------------------------------\n\n  Pulling screenshots:\n\n  Source               = ./app_images/screenshots\n  Destination          = /Users/admin/android-testify/Samples/Flix/src/androidTest/assets/\n\n  20 images to be pulled\n    Copying CastMemberScreenshotTest_default...\n    Copying ComposableScreenshotTest_default...\n    Copying CreditStripScreenshotTest_default...\n    Copying CreditStripScreenshotTest_emptyCreditStrip...\n    Copying CreditStripScreenshotTest_longCreditStrip...\n    Copying GenreStripScreenshotTest_default...\n    Copying GenreStripScreenshotTest_lotsOfGenres...\n    Copying MetaDataScreenshotTest_default...\n    Copying MetaDataScreenshotTest_onlyCertification...\n    Copying MetaDataScreenshotTest_onlyReleaseDate...\n    Copying MetaDataScreenshotTest_onlyRuntime...\n    Copying MovieDetailsScreenshotTest_default...\n    Copying MoviePosterScreenshotTest_default...\n    Copying MoviePosterScreenshotTest_nullPosterUrlImpliesLoading...\n    Copying OverviewTextScreenshotTest_default...\n    Copying OverviewTextScreenshotTest_longText...\n    Copying PrimaryTitleScreenshotTest_default...\n    Copying PrimaryTitleScreenshotTest_longText...\n    Copying SecondaryTitleScreenshotTest_default...\n    Copying SecondaryTitleScreenshotTest_longText...\n\n  Ready\n\nDeprecated Gradle features were used in this build, making it incompatible with Gradle 8.0.\n\nYou can use '--warning-mode all' to show the individual deprecation warnings and determine if they come from your own scripts or plugins.\n\nSee https://docs.gradle.org/7.5/userguide/command_line_interface.html#sec:command_line_warnings\n\nBUILD SUCCESSFUL in 4s\n1 actionable task: 1 executed\n")),(0,i.kt)("h3",{id:"screenshotclear"},"screenshotClear"),(0,i.kt)("p",null,"Clear any baseline images that may be remaining on your emulator."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell-session"},"$ ./gradlew FlixSample:screenshotClear\n\n\n> Task :FlixSample:screenshotClear\n\n------------------------------------------------------------\nRemove any existing screenshot test images from the device\n------------------------------------------------------------\n\n  20 images to be deleted:\n    x CastMemberScreenshotTest_default\n    x ComposableScreenshotTest_default\n    x CreditStripScreenshotTest_default\n    x CreditStripScreenshotTest_emptyCreditStrip\n    x CreditStripScreenshotTest_longCreditStrip\n    x GenreStripScreenshotTest_default\n    x GenreStripScreenshotTest_lotsOfGenres\n    x MetaDataScreenshotTest_default\n    x MetaDataScreenshotTest_onlyCertification\n    x MetaDataScreenshotTest_onlyReleaseDate\n    x MetaDataScreenshotTest_onlyRuntime\n    x MovieDetailsScreenshotTest_default\n    x MoviePosterScreenshotTest_default\n    x MoviePosterScreenshotTest_nullPosterUrlImpliesLoading\n    x OverviewTextScreenshotTest_default\n    x OverviewTextScreenshotTest_longText\n    x PrimaryTitleScreenshotTest_default\n    x PrimaryTitleScreenshotTest_longText\n    x SecondaryTitleScreenshotTest_default\n    x SecondaryTitleScreenshotTest_longText\n\nDeprecated Gradle features were used in this build, making it incompatible with Gradle 8.0.\n\nYou can use '--warning-mode all' to show the individual deprecation warnings and determine if they come from your own scripts or plugins.\n\nSee https://docs.gradle.org/7.5/userguide/command_line_interface.html#sec:command_line_warnings\n\nBUILD SUCCESSFUL in 1s\n1 actionable task: 1 executed\n")),(0,i.kt)("h2",{id:"report-tasks"},"Report Tasks"),(0,i.kt)("h3",{id:"reportpull"},"reportPull"),(0,i.kt)("p",null,"Pull the report file from the device and wait for it to be committed to disk.\nYou can customize the destination path and file name for the report file by providing the ",(0,i.kt)("inlineCode",{parentName:"p"},"reportFileName")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"reportPath")," paramaters to the gradle command."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"reportFileName")," :  Override the default file name used locally when copying the file."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"reportPath")," : Override the default path to copy the report file to.")),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell-session"},'./gradlew FlixSample:reportPull -PreportPath="/user/testify/" -PreportFileName="my-report.yml"\n')),(0,i.kt)("h3",{id:"reportshow"},"reportShow"),(0,i.kt)("p",null,"Print the test result report to the console."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell-session"},"$ ./gradlew FlixSample:reportShow\n\n> Task :FlixSample:reportShow\n\n------------------------------------------------------------\nPrint the test result report to the console\n------------------------------------------------------------\n\n---\n- session: 06583e71-665\n- date: 2021-03-19@20:37:32\n- failed: 0\n- passed: 1\n- total: 1\n- tests:\n    - test:\n        name: withFocusOnBackground\n        class: ClientListActivityScreenshotTest\n        package: dev.testify.sample.clients.index\n        baseline_image: assets/screenshots/29-1080x2220@440dp-en_US/withFocusOnBackground.png\n        test_image: /data/user/0/dev.testify.sample/app_images/screenshots/29-1080x2220@440dp-en_US/ClientListActivityScreenshotTest_withFocusOnBackground.png\n        status: PASS\n")),(0,i.kt)("h2",{id:"utility-tasks"},"Utility Tasks"),(0,i.kt)("h3",{id:"devicelocale"},"deviceLocale"),(0,i.kt)("p",null,"Displays the locale currently set on the device"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell-session"},"$ ./gradlew FlixSample:deviceLocale\n\n> Task :FlixSample:deviceLocale\n------------------------------------------------------------\nDisplays the locale currently set on the device\n------------------------------------------------------------\n  Locale               = en_US\n")),(0,i.kt)("h3",{id:"devicetimezone"},"deviceTimeZone"),(0,i.kt)("p",null,"Displays the time zone currently set on the device."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell-session"},"$ ./gradlew FlixSample:deviceTimeZone\n\n> Task :FlixSample:deviceTimeZone\n------------------------------------------------------------\nDisplays the time zone currently set on the device\n------------------------------------------------------------\n  Time zone            = America/Toronto\n")),(0,i.kt)("h3",{id:"disablesoftkeyboard"},"disableSoftKeyboard"),(0,i.kt)("p",null,"Disables the soft keyboard on the device. The soft keyboard can interfere with your screenshots, so it's good to turn it off."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell-session"},"$ ./gradlew FlixSample:disableSoftKeyboard\n\n> Task :FlixSample:disableSoftKeyboard\n------------------------------------------------------------\nDisables the soft keyboard on the device\n------------------------------------------------------------\n  Success\n\n")),(0,i.kt)("h3",{id:"hidepasswords"},"hidePasswords"),(0,i.kt)("p",null,"Hides passwords fully on the device."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell-session"},"$ ./gradlew FlixSample:hidePasswords\n\n> Task :FlixSample:hidePasswords\n------------------------------------------------------------\nHides passwords fully on the device\n------------------------------------------------------------\n  Success\n")),(0,i.kt)("h3",{id:"testifydevices"},"testifyDevices"),(0,i.kt)("p",null,"Displays the connected devices."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell-session"},"$ ./gradlew FlixSample:testifyDevices\n\n> Task :FlixSample:testifyDevices\n------------------------------------------------------------\nDisplays Testify devices\n------------------------------------------------------------\n  Connected devices    = 1\n------------------------------------------------------------\n  -Pdevice=0           = emulator-5554\n\n  Add -Pdevice=N to any command to target a specific device\n")),(0,i.kt)("h3",{id:"testifykey"},"testifyKey"),(0,i.kt)("p",null,"Displays the Testify output key for the current device. Testify uses the key as the baseline for the given device."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell-session"},"$ ./gradlew FlixSample:testifyKey\n\n> Task :FlixSample:testifyKey\n------------------------------------------------------------\nDisplays the Testify output key for the current device\n------------------------------------------------------------\n  Format: {api_version}-{width_in_pixels}x{height_in_pixels}@{dpi}-{language}\n  key                  = 21-768x1280@320dp-en_US\n")),(0,i.kt)("h3",{id:"testifysettings"},"testifySettings"),(0,i.kt)("p",null,"Testify infers several project properties. You can view these properties with the ",(0,i.kt)("inlineCode",{parentName:"p"},"testifySettings")," command."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell-session"},"$ ./gradlew FlixSample:testifySettings\n\n> Task :FlixSample:testifySettings\n\n------------------------------------------------------------\nDisplays the Testify gradle extension settings\n------------------------------------------------------------\n\n  baselineSourceDir      = /Users/admin/android-testify/Samples/Flix/src/androidTest/assets\n  installAndroidTestTask = installDebugAndroidTest\n  installTask            = installDebug\n  moduleName             = FlixSample\n  outputFileNameFormat   = null\n  pullWaitTime           = 0\n  reportFilePath         = ./app_testify\n  screenshotAnnotation   = null\n  screenshotDirectory    = ./app_images/screenshots\n  targetPackageId        = dev.testify.samples.flix\n  testPackageId          = dev.testify.samples.flix.test\n  testRunner             = androidx.test.runner.AndroidJUnitRunner\n  useSdCard              = false\n  useTestStorage         = false\n  isRecordMode           = false\n  user                   = 0\n\nDeprecated Gradle features were used in this build, making it incompatible with Gradle 8.0.\n\nYou can use '--warning-mode all' to show the individual deprecation warnings and determine if they come from your own scripts or plugins.\n\nSee https://docs.gradle.org/7.5/userguide/command_line_interface.html#sec:command_line_warnings\n\nBUILD SUCCESSFUL in 845ms\n1 actionable task: 1 executed\n")),(0,i.kt)("h3",{id:"testifyversion"},"testifyVersion"),(0,i.kt)("p",null,"Displays the Testify plugin version"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell-session"},"$ ./gradlew FlixSample:testifyVersion\n\n> Task :FlixSample:testifyVersion\n------------------------------------------------------------\nDisplays the Testify plugin version\n------------------------------------------------------------\n  Vendor               = ndtp\n  Title                = Testify\n  Version              = 1.0.0-beta3\n")))}p.isMDXComponent=!0}}]);
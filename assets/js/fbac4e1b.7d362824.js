"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7583],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),d=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=d(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=d(n),m=a,f=u["".concat(l,".").concat(m)]||u[m]||p[m]||o;return n?r.createElement(f,i(i({ref:t},c),{},{components:n})):r.createElement(f,i({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:a,i[1]=s;for(var d=2;d<o;d++)i[d]=n[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1184:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var r=n(7462),a=(n(7294),n(3905));const o={},i="Update your baseline",s={unversionedId:"get-started/update-baseline",id:"version-2.0.0-rc02/get-started/update-baseline",title:"Update your baseline",description:"Testify works by referencing a PNG baseline found in your androidTest/assets directory for each test case that you write. As you write and run tests, an updated baseline image is maintained on your device or emulator. In order to update the baseline, you need to copy or pull the image from the device to your local development environment. Testify offers a variety of Gradle tasks to simplify the copying of your baseline images.",source:"@site/versioned_docs/version-2.0.0-rc02/get-started/5-update-baseline.md",sourceDirName:"get-started",slug:"/get-started/update-baseline",permalink:"/android-testify/docs/2.0.0-rc02/get-started/update-baseline",draft:!1,editUrl:"https://github.com/ndtp/android-testify/tree/issue-12/docusaurus/docs/versioned_docs/version-2.0.0-rc02/get-started/5-update-baseline.md",tags:[],version:"2.0.0-rc02",sidebarPosition:5,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Write a test",permalink:"/android-testify/docs/2.0.0-rc02/get-started/write-a-test"},next:{title:"Verify the tests",permalink:"/android-testify/docs/2.0.0-rc02/get-started/verify-tests"}},l={},d=[{value:"Record a new baseline",id:"record-a-new-baseline",level:2},{value:"Pull images from the device",id:"pull-images-from-the-device",level:2},{value:"Record a new baseline using Testify settings",id:"record-a-new-baseline-using-testify-settings",level:2},{value:"Enable record mode in Testify settings",id:"enable-record-mode-in-testify-settings",level:3},{value:"Enable record mode in ScreenshotRule",id:"enable-record-mode-in-screenshotrule",level:3}],c={toc:d};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"update-your-baseline"},"Update your baseline"),(0,a.kt)("p",null,"Testify works by referencing a PNG baseline found in your ",(0,a.kt)("inlineCode",{parentName:"p"},"androidTest/assets")," directory for each test case that you write. As you write and run tests, an updated baseline image is maintained on your device or emulator. In order to update the baseline, you need to copy or pull the image from the device to your local development environment. Testify offers a variety of Gradle tasks to simplify the copying of your baseline images."),(0,a.kt)("h2",{id:"record-a-new-baseline"},"Record a new baseline"),(0,a.kt)("p",null,"Run all the screenshot tests in your app and update the local baseline."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"./gradlew screenshotRecord\n")),(0,a.kt)("h2",{id:"pull-images-from-the-device"},"Pull images from the device"),(0,a.kt)("p",null,"Copy images from the ",(0,a.kt)("inlineCode",{parentName:"p"},"app_images")," directory on your emulator to your local ",(0,a.kt)("inlineCode",{parentName:"p"},"androidTest/assets"),"\ndirectory."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"./gradlew screenshotPull\n")),(0,a.kt)("h2",{id:"record-a-new-baseline-using-testify-settings"},"Record a new baseline using Testify settings"),(0,a.kt)("p",null,"Sometimes it's not possible to record new baseline using ",(0,a.kt)("inlineCode",{parentName:"p"},"screenshotRecord")," task \u2014 for example, when\nrunning screenshot tests on Gradle managed device. In such cases there should be another way to\ninstruct Testify to generate new baselines. There are two options."),(0,a.kt)("h3",{id:"enable-record-mode-in-testify-settings"},"Enable record mode in Testify settings"),(0,a.kt)("p",null,"Just set ",(0,a.kt)("inlineCode",{parentName:"p"},"recordMode = true")," in the ",(0,a.kt)("inlineCode",{parentName:"p"},"testify")," block inside ",(0,a.kt)("inlineCode",{parentName:"p"},"build.gradle")," file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-groovy"},"testify {\n    recordMode = true\n}\n")),(0,a.kt)("p",null,"Bear in mind that this setting will enable generating of new baselines for all tests in the module."),(0,a.kt)("h3",{id:"enable-record-mode-in-screenshotrule"},"Enable record mode in ScreenshotRule"),(0,a.kt)("p",null,"It's also possible to enable record mode inside the test:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"val screenshotRule = ScreenshotRule(ClientListActivity::class.java)\n\nscreenshotRule.setRecordModeEnabled(true)\n")),(0,a.kt)("p",null,"With ",(0,a.kt)("inlineCode",{parentName:"p"},"ScreenshotRule")," record mode could be enabled only for specific test and disabled for all\nothers."))}u.isMDXComponent=!0}}]);
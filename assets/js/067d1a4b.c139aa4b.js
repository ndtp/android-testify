"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8763],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=o.createContext({}),l=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=l(e.components);return o.createElement(p.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=l(n),d=r,f=m["".concat(p,".").concat(d)]||m[d]||u[d]||a;return n?o.createElement(f,s(s({ref:t},c),{},{components:n})):o.createElement(f,s({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,s=new Array(a);s[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[m]="string"==typeof e?e:r,s[1]=i;for(var l=2;l<a;l++)s[l]=n[l];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2668:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var o=n(7462),r=(n(7294),n(3905));const a={},s="Test a Composable",i={unversionedId:"extensions/compose/test",id:"version-2.0.0-beta03/extensions/compose/test",title:"Test a Composable",description:"In order to test a @Composable function, you must first declare an instance variable of the ComposableScreenshotRule class. You will be using this rule instead of the default ScreenshotTestRule.",source:"@site/versioned_docs/version-2.0.0-beta03/extensions/compose/2-test.md",sourceDirName:"extensions/compose",slug:"/extensions/compose/test",permalink:"/android-testify/docs/2.0.0-beta03/extensions/compose/test",draft:!1,editUrl:"https://github.com/ndtp/android-testify/tree/issue-12/docusaurus/docs/versioned_docs/version-2.0.0-beta03/extensions/compose/2-test.md",tags:[],version:"2.0.0-beta03",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Set up testify-compose",permalink:"/android-testify/docs/2.0.0-beta03/extensions/compose/setup"},next:{title:"Interoperability with ComposeTestRule",permalink:"/android-testify/docs/2.0.0-beta03/extensions/compose/compose-test-rule"}},p={},l=[{value:"Example",id:"example",level:3}],c={toc:l};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"test-a-composable"},"Test a Composable"),(0,r.kt)("p",null,"In order to test a ",(0,r.kt)("inlineCode",{parentName:"p"},"@Composable")," function, you must first declare an instance variable of the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ndtp/android-testify/blob/main/Ext/Compose/src/main/java/dev/testify/ComposableScreenshotRule.kt"},(0,r.kt)("inlineCode",{parentName:"a"},"ComposableScreenshotRule"))," class. You will be using this rule instead of the default ",(0,r.kt)("inlineCode",{parentName:"p"},"ScreenshotTestRule"),"."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ComposableScreenshotRule")," provides a ",(0,r.kt)("inlineCode",{parentName:"p"},"setCompose()")," method which accepts a composable function in which you can specify your own custom compositions. You can invoke the ",(0,r.kt)("inlineCode",{parentName:"p"},"setCompose()")," method on the ",(0,r.kt)("inlineCode",{parentName:"p"},"rule")," instance and declare any Compose UI functions you wish to test."),(0,r.kt)("p",null,"The contents of ",(0,r.kt)("inlineCode",{parentName:"p"},"setCompose()")," are rendered as the contents of the provided ",(0,r.kt)("inlineCode",{parentName:"p"},"ComposableTestActivity"),". ",(0,r.kt)("inlineCode",{parentName:"p"},"ComposableTestActivity")," is a simple activity with single root ",(0,r.kt)("a",{parentName:"p",href:"https://developer.android.com/reference/kotlin/androidx/compose/ui/platform/ComposeView"},(0,r.kt)("inlineCode",{parentName:"a"},"ComposeView"))," with a ",(0,r.kt)("inlineCode",{parentName:"p"},"Color.White")," background. "),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"ComposeView")," provided by ",(0,r.kt)("inlineCode",{parentName:"p"},"ComposableTestActivity")," is defined with ",(0,r.kt)("inlineCode",{parentName:"p"},"WRAP_CONTENT")," layout parameters and so the captured image will be constrained to fit only the bounds of the ",(0,r.kt)("inlineCode",{parentName:"p"},"@Composable"),"."),(0,r.kt)("p",null,"If necessary, you can access the root view with the identifier ",(0,r.kt)("inlineCode",{parentName:"p"},"dev.testify.compose.R.id.compose_container"),"."),(0,r.kt)("h3",{id:"example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'class ComposableScreenshotTest {\n\n    @get:Rule val rule = ComposableScreenshotRule()\n\n    @ScreenshotInstrumentation\n    @Test\n    fun default() {\n        rule\n            .setCompose {\n                Text(text = "Hello, Testify!")\n            }\n            .assertSame()\n    }\n}\n')))}m.isMDXComponent=!0}}]);
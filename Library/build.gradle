plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'org.jetbrains.dokka'
}

ext {
    pom = [
        publishedGroupId  : 'dev.testify',
        artifact          : 'testify',
        libraryName       : 'testify',
        libraryDescription: 'Android screenshot instrumentation tests.',
        siteUrl           : 'https://github.com/ndtp/android-testify',
        gitUrl            : 'https://github.com/ndtp/android-testify.git',
        licenseName       : 'The MIT License',
        licenseUrl        : 'https://opensource.org/licenses/MIT',
        author            : 'ndtp'
    ]
}

version = "$project.versions.testify"
group = pom.publishedGroupId
archivesBaseName = pom.artifact

android {
    compileSdkVersion coreVersions.compileSdk


    defaultConfig {
        minSdkVersion coreVersions.minSdk
        targetSdkVersion coreVersions.targetSdk
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled = true
        kotlinOptions {
            allWarningsAsErrors = true
        }
    }

    libraryVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "${archivesBaseName}-${version}.aar"
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.all {
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                outputs.upToDateWhen { false }
                showStandardStreams = true
            }
        }
    }

    dependencies {
        implementation "androidx.test.espresso:espresso-core:${versions.androidx.test.espresso}"
        implementation "androidx.test:rules:${versions.androidx.test.rules}"
        implementation "androidx.test:runner:${versions.androidx.test.runner}"
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${versions.kotlin}"
        implementation "com.github.ajalt:colormath:${versions.colormath}"
//        implementation "androidx.core:core-ktx:1.10.0"
        implementation "androidx.annotation:annotation:1.4.0"
        implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:${versions.kotlinx}") {
            exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib-jdk8'
            exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib-jdk7'
            exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib'
            exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib-common'
        }

        testImplementation "io.mockk:mockk:${versions.mockk}"
        testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:${versions.kotlinx}"
        testImplementation "org.slf4j:slf4j-jdk14:${versions.slf4j}"

        androidTestImplementation "androidx.test.ext:junit:${versions.androidx.test.junit}"
        androidTestImplementation "androidx.test:runner:${versions.androidx.test.runner}"
        androidTestImplementation "androidx.test:rules:${versions.androidx.test.rules}"
        androidTestImplementation "androidx.test.espresso:espresso-core:${versions.androidx.test.espresso}"
        androidTestImplementation "androidx.test.espresso:espresso-contrib:${versions.androidx.test.espresso}"
        androidTestImplementation "com.google.android.material:material:${versions.material}"
        androidTestImplementation "androidx.appcompat:appcompat:${versions.androidx.appCompat}"
        androidTestImplementation "androidx.multidex:multidex:2.0.1"
    }
    lint {
        abortOnError true
        textOutput file('stdout')
        textReport true
        warningsAsErrors true
        xmlReport false
    }
    namespace 'dev.testify'
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

afterEvaluate {
    apply from: "../publish.build.gradle"
}

apply from: '../ktlint.gradle'
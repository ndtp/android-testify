plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'org.jetbrains.dokka'
    id 'jacoco'
}

ext {
    pom = [
            publishedGroupId  : 'dev.testify',
            artifact          : 'testify',
            libraryName       : 'testify',
            libraryDescription: 'Android screenshot instrumentation tests.',
            siteUrl           : 'https://github.com/ndtp/android-testify',
            gitUrl            : 'https://github.com/ndtp/android-testify.git',
            licenseName       : 'The MIT License',
            licenseUrl        : 'https://opensource.org/licenses/MIT',
            author            : 'ndtp'
    ]
}

version = project.findProperty("testify_version") ?: "0.0.1-SNAPSHOT"
group = pom.publishedGroupId
archivesBaseName = pom.artifact

jacoco { toolVersion = "0.8.10" }

android {
    compileSdkVersion coreVersions.compileSdk

    kotlinOptions {
        jvmTarget = '17'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    defaultConfig {
        minSdkVersion coreVersions.minSdk
        targetSdkVersion coreVersions.targetSdk
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled = true
        kotlinOptions {
            allWarningsAsErrors = true
            freeCompilerArgs = ["-Xcontext-receivers"]
        }
    }

    libraryVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "${archivesBaseName}-${version}.aar"
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.all {
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                outputs.upToDateWhen { false }
                showStandardStreams = true
            }
        }
    }

    dependencies {
        implementation libs.androidx.core.ktx
        implementation libs.androidx.espresso.core
        implementation libs.androidx.lifecycle.runtime.ktx
        implementation libs.androidx.rules
        implementation libs.androidx.runner
        implementation libs.colormath
        implementation libs.kotlinx.coroutines.android

        testImplementation libs.kotlinx.coroutines.test
        testImplementation libs.mockk
        testImplementation libs.slf4j.jdk14
        testImplementation libs.truth

        androidTestImplementation libs.androidx.appcompat
        androidTestImplementation libs.androidx.espresso.contrib
        androidTestImplementation libs.androidx.espresso.core
        androidTestImplementation libs.androidx.junit
        androidTestImplementation libs.androidx.multidex
        androidTestImplementation libs.androidx.rules
        androidTestImplementation libs.androidx.runner
        androidTestImplementation libs.material
        androidTestImplementation libs.mockk.android
    }
    lint {
        abortOnError true
        textOutput file('stdout')
        textReport true
        htmlReport true
        warningsAsErrors true
        xmlReport false
    }
    packagingOptions {
        resources {
            excludes += [
                    'MANIFEST.MF',
                    'META-INF/LICENSE.md',
                    'META-INF/LICENSE-notice.md'
            ]
        }
    }
    namespace 'dev.testify'

    publishing {
        singleVariant("release") {
            // if you don't want sources/javadoc, remove these lines
            withSourcesJar()
            withJavadocJar()
        }
    }
}

afterEvaluate {
    apply from: "../publish.build.gradle"
}

apply from: '../ktlint.gradle'

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

project.afterEvaluate {
    android.buildTypes.each { buildType ->
        def testTaskName = "test${buildType.name.capitalize()}UnitTest"
        task "${testTaskName}Coverage"(type: JacocoReport, dependsOn: ["$testTaskName"]) {
            group = "Reporting"
            description = "Generate Jacoco coverage reports for the $testTaskName"
            reports {
                html.required = true
                xml.required = true
            }
            def excludes = [
                    '**/dev/testify/core/processor/capture/*',
                    '**/dev/testify/extensions/ViewExtensionsKt*',
                    '**/dev/testify/internal/extensions/LocaleExtensionsKt*',
                    '**/dev/testify/internal/helpers/AssetLoaderKt*',
                    '**/dev/testify/internal/helpers/OrientationHelperKt*',
                    '**/dev/testify/internal/helpers/WrappedFontScaleKt*',
                    '**/dev/testify/core/processor/compare/SameAsCompare*',
                    '**/dev/testify/output/*',
                    '**/dev/testify/resources/TestifyResourcesOverride*',
                    '**/dev/testify/ScreenshotUtilityKt*',
            ]
            def javaClasses = fileTree(dir: "${buildDir}/intermediates/javac/debug/classes", excludes: excludes)
            def kotlinClasses = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: excludes)
            classDirectories.setFrom(files([javaClasses, kotlinClasses]))
            sourceDirectories.setFrom(files(["$project.projectDir/src/main/java"]))
            executionData(files("${project.buildDir}/jacoco/${testTaskName}.exec"))
        }
    }
}
plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'org.jetbrains.dokka'
    id 'jacoco'
}

ext {
    pom = [
            publishedGroupId  : 'dev.testify',
            artifact          : 'testify',
            libraryName       : 'testify',
            libraryDescription: 'Android screenshot instrumentation tests.',
            siteUrl           : 'https://github.com/ndtp/android-testify',
            gitUrl            : 'https://github.com/ndtp/android-testify.git',
            licenseName       : 'The MIT License',
            licenseUrl        : 'https://opensource.org/licenses/MIT',
            author            : 'ndtp'
    ]
}

version = "$project.versions.testify"
group = pom.publishedGroupId
archivesBaseName = pom.artifact

jacoco { toolVersion = "0.8.10" }

android {
    compileSdkVersion coreVersions.compileSdk


    defaultConfig {
        minSdkVersion coreVersions.minSdk
        targetSdkVersion coreVersions.targetSdk
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled = true
        kotlinOptions {
            allWarningsAsErrors = true
            freeCompilerArgs = [ "-Xcontext-receivers" ]
        }
    }

    libraryVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "${archivesBaseName}-${version}.aar"
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.all {
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                outputs.upToDateWhen { false }
                showStandardStreams = true
            }
        }
    }

    dependencies {
        implementation "androidx.lifecycle:lifecycle-runtime-ktx:${versions.androidx.lifecycleKtx}"
        implementation "androidx.test.espresso:espresso-core:${versions.androidx.test.espresso}"
        implementation "androidx.test:rules:${versions.androidx.test.rules}"
        implementation "androidx.test:runner:${versions.androidx.test.runner}"
        implementation "com.github.ajalt:colormath:${versions.colormath}"
        implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:${versions.kotlinx}") {
            exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib-jdk8'
            exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib-jdk7'
            exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib'
            exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib-common'
        }
        implementation "androidx.test:core-ktx:${versions.androidx.test.coreKtx}"

        testImplementation "io.mockk:mockk:${versions.mockk}"
        testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:${versions.kotlinx}"
        testImplementation "org.slf4j:slf4j-jdk14:${versions.slf4j}"
        testImplementation "com.google.truth:truth:${versions.truth}"

        androidTestImplementation "androidx.test.ext:junit:${versions.androidx.test.junit}"
        androidTestImplementation "androidx.test:runner:${versions.androidx.test.runner}"
        androidTestImplementation "androidx.test:rules:${versions.androidx.test.rules}"
        androidTestImplementation "androidx.test.espresso:espresso-core:${versions.androidx.test.espresso}"
        androidTestImplementation "androidx.test.espresso:espresso-contrib:${versions.androidx.test.espresso}"
        androidTestImplementation "com.google.android.material:material:${versions.material}"
        androidTestImplementation "androidx.appcompat:appcompat:${versions.androidx.appCompat}"
        androidTestImplementation "androidx.multidex:multidex:2.0.1"
        androidTestImplementation "io.mockk:mockk-android:${versions.mockk}"
    }
    lint {
        abortOnError true
        textOutput file('stdout')
        textReport true
        htmlReport true
        warningsAsErrors true
        xmlReport false
    }
    packagingOptions {
        resources {
            excludes += [
                    'MANIFEST.MF',
                    'META-INF/LICENSE.md',
                    'META-INF/LICENSE-notice.md'
            ]
        }
    }
    namespace 'dev.testify'
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

afterEvaluate {
    apply from: "../publish.build.gradle"
}

apply from: '../ktlint.gradle'

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

project.afterEvaluate {
    android.buildTypes.each { buildType ->
        def testTaskName = "test${buildType.name.capitalize()}UnitTest"
        task "${testTaskName}Coverage"(type: JacocoReport, dependsOn: ["$testTaskName"]) {
            group = "Reporting"
            description = "Generate Jacoco coverage reports for the $testTaskName"
            reports {
                html.required = true
                xml.required = true
            }
            def excludes = [
                    '**/dev/testify/core/processor/capture/*',
                    '**/dev/testify/extensions/ViewExtensionsKt*',
                    '**/dev/testify/internal/extensions/LocaleExtensionsKt*',
                    '**/dev/testify/internal/helpers/AssetLoaderKt*',
                    '**/dev/testify/internal/helpers/OrientationHelperKt*',
                    '**/dev/testify/internal/helpers/WrappedFontScaleKt*',
                    '**/dev/testify/core/processor/compare/SameAsCompare*',
                    '**/dev/testify/output/*',
                    '**/dev/testify/resources/TestifyResourcesOverride*',
                    '**/dev/testify/ScreenshotUtilityKt*',
            ]
            def javaClasses = fileTree(dir: "${buildDir}/intermediates/javac/debug/classes", excludes: excludes)
            def kotlinClasses = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: excludes)
            classDirectories.setFrom(files([javaClasses, kotlinClasses]))
            sourceDirectories.setFrom(files(["$project.projectDir/src/main/java"]))
            executionData(files("${project.buildDir}/jacoco/${testTaskName}.exec"))
        }
    }
}